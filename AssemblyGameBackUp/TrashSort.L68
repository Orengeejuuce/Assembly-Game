00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/13/2024 4:37:15 PM

00000000                             1   *-----------------------------------------------------------
00000000                             2  * Title      : Trash Sort
00000000                             3  * Written by : Haley Park
00000000                             4  * Date       :
00000000                             5  * Description: A game where the player must sort as much recycling and trash before the time runs out
00000000                             6  *-----------------------------------------------------------
00000000  =0000000F                  7  DISPLAY_SCORE           EQU     15
00000000  =0000005F                  8  PRINT_STRING            EQU     95
00000000  =00000011                  9  DOUBLE_BUFFERED_MODE    EQU     17
00000000  =0000005E                 10  REPAINT_SCREEN_COMMAND  equ     94
00000000  =0000000B                 11  CLEAR_SCREEN_COMMAND    equ     11
00000000  =0000FF00                 12  CLEAR_SCREEN_MAGIC_VAL  equ     $FF00
00000000  =0000005C                 13  DRAWING_MODE_COMMAND    equ     92
00000000                            14  
00000000  =0000005F                 15  DISPLAY_STRING          EQU     95
00000000                            16  
00000000  =0000000C                 17  CONST_VELOCITY          EQU     12
00000000                            18  
00000000  =00000005                 19  ENTER_GAMELOOP_INPUT    EQU     5
00000000                            20  
00000000  =00000050                 21  PEN_COLOR_COMMAND       EQU     80
00000000  =00000051                 22  FILL_COLOR_COMMAND      EQU     81
00000000  =00DCA399                 23  BACKGROUND_COLOR        EQU     $00DCA399
00000000  =00000059                 24  FLOOD_FILL_COMMAND      EQU     89
00000000  =00000057                 25  DRAW_RECTANGLE          EQU     87
00000000                            26  
00000000  =00000008                 27  GET_TIME_COMMAND        EQU     8
00000000  =00000002                 28  FRACTIONAL_BITS         EQU     2
00000000                            29  
00001000                            30      ORG    $1000
00001000                            31  START:                  ; first instruction of program
00001000                            32  **********************************************************************
00001000                            33  * Initialization
00001000                            34  **********************************************************************
00001000                            35  MainInitialize
00001000  23FC 00000000 005C69F4    36          move.l      #0,chosenBin
0000100A  23FC 00000000 005C69FC    37          move.l      #0,score
00001014  23FC 00001770 005C69E8    38          move.l      #6000,time
0000101E  4EB9 00001700             39          jsr         setScreenResolution  
00001024                            40          
00001024  4EB9 0000135A             41          jsr         FillBackground
0000102A                            42          
0000102A  4EB9 005C644A             43          jsr         DisplayEnterScreen
00001030                            44          
00001030  4EB9 005C626A             45          jsr         RandomBinGenerator
00001036                            46          
00001036  4EB9 005C6982             47          jsr         SoundInitialize
0000103C                            48        
0000103C                            49          
0000103C                            50          *set double buffered mode                   
0000103C  103C 005C                 51          move.b      #DRAWING_MODE_COMMAND,d0
00001040  123C 0011                 52          move.b      #DOUBLE_BUFFERED_MODE,d1
00001044  4E4F                      53          trap            #15     
00001046                            54          
00001046                            55  WaitForEnter
00001046  4EB9 000014B4             56          jsr         RestartScreen
0000104C  4EB9 0000135A             57          jsr         FillBackground
00001052  4EB9 005C63B0             58          jsr         DisplayLoadingScreen
00001058                            59          
00001058  7005                      60          move.l      #ENTER_GAMELOOP_INPUT,d0
0000105A  4E4F                      61          trap        #15
0000105C                            62          
0000105C  0C01 000D                 63          cmpi.b      #$0D,d1
00001060  6700 0004                 64          beq         GameLoopInitialize
00001064                            65          
00001064  60E0                      66          bra         WaitForEnter
00001066                            67          
00001066                            68  GameLoopInitialize
00001066  4EB9 00001412             69           jsr         SwapBuffers
0000106C  4EB9 005C6990             70           jsr         PlayBackgroundMusic
00001072  4EB9 000014B4             71           jsr         RestartScreen
00001078  4EB9 005C6472             72           jsr         DisplayBackground 
0000107E  4EB9 005C6834             73           jsr         DisplayAllBins
00001084  4EB9 00001412             74           jsr         SwapBuffers  
0000108A  4EB9 00001328             75           jsr         GetTime
00001090                            76          
00001090                            77  **********************************************************************
00001090                            78  * GameLoop
00001090                            79  ********************************************************************** 
00001090                            80  GameLoop
00001090                            81          
00001090                            82          
00001090  4EB9 00001310             83          jsr         FindDeltaTime ; finds time-based velocity
00001096                            84  
00001096                            85  
00001096                            86         
00001096  4EB9 00001348             87          jsr         CalcVelocity 
0000109C                            88          
0000109C                            89          
0000109C                            90          
0000109C  0CB9 00000001 005C69E8    91          cmpi.l      #1,time
000010A6  6D00 0182                 92          blt         GameOver
000010AA                            93          
000010AA  23F9 005C69CC 005C69D4    94          move.l      randomObjPosX,invalPosX
000010B4  23F9 005C69D0 005C69D8    95          move.l      randomObjPosY,invalPosY
000010BE                            96          
000010BE  0CB9 00000000 005C6A10    97          cmpi.l      #0,objIsMoving
000010C8  6700 00D6                 98          beq         InputObjMovement
000010CC                            99          
000010CC  0CB9 00000000 005C6A0C   100          cmpi.l      #0,objDropped
000010D6  6700 005C                101          beq         Input
000010DA                           102          
000010DA                           103          * if obj is not at the center yet, keep updating its position and render it until it is
000010DA  2039 005C69D0            104          move.l      randomObjPosY,d0
000010E0  B0B9 005C69C8            105          cmp.l       objDropCenterPos,d0
000010E6  6700 004C                106          beq         Input
000010EA                           107          
000010EA  203C 000000C8            108          move.l      #200,d0
000010F0  90B9 005C69D0            109          sub.l       randomObjPosY,d0
000010F6  B0BC 000000C8            110          cmp.l       #200,d0
000010FC  6E00 0066                111          bgt         Update
00001100                           112          
00001100                           113          *last frame before obj reaches center
00001100                           114  *-----------------------------------------------------------------------------------------
00001100                           115          * randomly generates new locations for bins every 10 seconds
00001100                           116  *        move.l      binMixCounter,d0
00001100                           117  *        divu.w      #10,d0
00001100                           118  *        swap        d0
00001100                           119  
00001100  2039 005C69FC            120          move.l      score,d0
00001106  0C40 0064                121          cmpi.w      #100,d0
0000110A  6600 0014                122          bne         centerInval
0000110E                           123          
0000110E  4EB9 00001412            124          jsr         SwapBuffers
00001114                           125           
00001114  4EB9 005C626A            126          jsr         RandomBinGenerator
0000111A  4EB9 00001254            127          jsr         PauseTimer
00001120                           128          
00001120                           129          
00001120                           130  CenterInval        
00001120  4EB9 005C67FA            131          jsr         objInval
00001126  23F9 005C69C8 005C69D0   132          move.l      objDropCenterPos,randomObjPosY
00001130  6000 00BA                133          bra         render
00001134                           134          
00001134                           135  Input
00001134                           136          
00001134                           137          
00001134                           138          * record curr frame value for comparison in next frame
00001134  45F9 005C69A8            139          lea         lastFrameKeyDown,a2
0000113A  24B9 005C69AC            140          move.l      currentFrameKeyDown,(a2)
00001140                           141      
00001140  23FC 00000000 005C6A0C   142          move.l      #0,objDropped
0000114A  23FC 00000001 005C69AC   143          move.l      #1,currentFrameKeyDown
00001154                           144          
00001154  4EB9 0000141E            145          jsr         InitData
0000115A  4EB9 00001424            146          jsr         CheckInput
00001160  6000 0020                147          bra         ObjDropComplete
00001164                           148      
00001164                           149  Update 
00001164                           150          * checks to see if obj has finished dropping
00001164  0CB9 00000000 005C6A0C   151          cmpi.l      #0,objDropped
0000116E  6700 0012                152          beq         objDropComplete
00001172                           153  
00001172  4EB9 005C67FA            154          jsr         objInval
00001178  4EB9 00001372            155          jsr         RandomObjDrop         ; updates position of  random obj dropped
0000117E  6000 006C                156          bra         Render
00001182                           157      
00001182                           158  ObjDropComplete
00001182                           159  
00001182                           160          
00001182                           161          * if there is an input, check to see if the previous frame also has input
00001182                           162          * otherwise, do not update and render
00001182  0CB9 00000000 005C69AC   163          cmpi.l      #0,currentFrameKeyDown
0000118C  6600 005E                164          bne         Render
00001190                           165          
00001190                           166          * compare the two frames: if last frame was not pressed, then process input
00001190  2039 005C69A8            167          move.l      lastFrameKeyDown,d0
00001196  0C80 00000001            168          cmpi.l      #1,d0
0000119C  6600 004E                169          bne         Render
000011A0                           170  *----------- KEY UP ----------------------------------
000011A0                           171  InputObjMovement
000011A0  4EB9 000014FE            172          jsr         ObjMovement ; updates obj position based on player input
000011A6                           173          
000011A6                           174          * checks to see if object has finished moving
000011A6  0CB9 00000000 005C6A10   175          cmpi.l      #0,objIsMoving
000011B0  6700 003A                176          beq         Render
000011B4                           177          * ------- obj is done moving ----------------
000011B4                           178          
000011B4  4EB9 000015F8            179          jsr         CheckObjSorted ; checks obj to update score
000011BA  4EB9 000013B2            180          jsr         CalcScore
000011C0                           181          
000011C0                           182          * generate next random obj
000011C0  4EB9 005C6250            183          jsr     RandomObjGenerator
000011C6  47F9 005C6A14            184          lea     randomObjToSort,a3
000011CC  2687                     185          move.l  d7,(a3)
000011CE                           186  
000011CE                           187          
000011CE                           188          * reset drop obj
000011CE  23FC 00000001 005C6A0C   189          move.l      #1,objDropped
000011D8                           190          
000011D8                           191          * reset obj position
000011D8  23FC 00000122 005C69CC   192          move.l      #290,randomObjPosX
000011E2  23FC FFFFFFCE 005C69D0   193          move.l      #-50,randomObjPosY
000011EC                           194          
000011EC                           195          
000011EC                           196  Render  
000011EC  4EB9 005C67C6            197          jsr         SevenSegInval
000011F2  2F3C 00000046            198          move.l      #70,-(sp)
000011F8  2F3C 0000023A            199          move.l      #570,-(sp)
000011FE  4EB9 000013D4            200          jsr         DisplayCountdownTimer
00001204  508F                     201          add.l       #8,sp
00001206                           202  
00001206  2F3C 00000046            203          move.l      #70,-(sp)
0000120C  2F3C 0000009F            204          move.l      #159,-(sp)
00001212  4EB9 00001386            205          jsr         DisplayScore
00001218  508F                     206          add.l       #8,sp
0000121A                           207          
0000121A                           208          
0000121A  4EB9 005C62CE            209          jsr         DisplayRandomObj
00001220                           210       
00001220  4EB9 00001412            211          jsr         SwapBuffers   
00001226                           212  
00001226  6000 FE68                213          bra         GameLoop
0000122A                           214  **********************************************************************
0000122A                           215  * Game Over & final score  
0000122A                           216  GameOver 
0000122A  4EB9 000014B4            217          jsr         RestartScreen
00001230  4EB9 0000135A            218          jsr         FillBackground
00001236                           219          
00001236  2F3C 000000F0            220          move.l      #240,-(sp)
0000123C  2F3C 00000154            221          move.l      #340,-(sp)
00001242  4EB9 00001386            222          jsr         DisplayScore
00001248  508F                     223          add.l       #8,sp
0000124A                           224          
0000124A  4EB9 00001412            225          jsr         SwapBuffers
00001250                           226          
00001250  FFFF FFFF                227          SIMHALT
00001254                           228  **********************************************************************
00001254                           229  **********************************************************************
00001254                           230  * Subroutines
00001254                           231  ********************************************************************** 
00001254                           232  PauseTimer
00001254  7050                     233          move.l      #PEN_COLOR_COMMAND,d0
00001256  223C 00FFFFFF            234          move.l      #$00FFFFFF,d1
0000125C  4E4F                     235          trap        #15
0000125E                           236          
0000125E  7051                     237          move.l      #FILL_COLOR_COMMAND,d0
00001260  223C 001616DC            238          move.l      #$001616DC,d1
00001266  4E4F                     239          trap        #15
00001268                           240          
00001268  7057                     241          move.l      #DRAW_RECTANGLE,d0
0000126A  223C 000000C0            242          move.l      #192,d1
00001270  243C 000000B8            243          move.l      #184,d2
00001276  263C 000001C8            244          move.l      #456,d3
0000127C  283C 00000139            245          move.l      #313,d4
00001282  4E4F                     246          trap        #15
00001284                           247          
00001284  705F                     248          move.l      #DISPLAY_STRING,d0
00001286  43F9 005C6A20            249          lea         warningString,a1
0000128C  223C 00000119            250          move.l      #281,d1
00001292  243C 000000DC            251          move.l      #220,d2
00001298  4E4F                     252          trap        #15
0000129A                           253          
0000129A  705F                     254          move.l      #DISPLAY_STRING,d0
0000129C  43F9 005C6A2B            255          lea         workerString,a1
000012A2  223C 000000C8            256          move.l      #200,d1
000012A8  243C 000000EB            257          move.l      #235,d2
000012AE  4E4F                     258          trap        #15
000012B0                           259          
000012B0                           260          
000012B0  7050                     261          move.l      #PEN_COLOR_COMMAND,d0
000012B2  223C 001616DC            262          move.l      #$001616DC,d1
000012B8  4E4F                     263          trap        #15
000012BA                           264          
000012BA  7051                     265          move.l      #FILL_COLOR_COMMAND,d0
000012BC  4E4F                     266          trap        #15
000012BE                           267          
000012BE  4281                     268          clr.l       d1
000012C0                           269          
000012C0  4EB9 00001412            270          jsr         SwapBuffers
000012C6                           271          
000012C6  7050                     272          move.l      #PEN_COLOR_COMMAND,d0
000012C8  223C 009C6258            273          move.l      #$009C6258,d1
000012CE  4E4F                     274          trap        #15
000012D0                           275          
000012D0  7051                     276          move.l      #FILL_COLOR_COMMAND,d0
000012D2  223C 009C6258            277          move.l      #$009C6258,d1
000012D8  4E4F                     278          trap        #15
000012DA                           279          
000012DA  7057                     280          move.l      #DRAW_RECTANGLE,d0
000012DC  7264                     281          move.l      #100,d1
000012DE  243C 00000096            282          move.l      #150,d2
000012E4  263C 000001D6            283          move.l      #470,d3
000012EA  283C 0000015E            284          move.l      #350,d4
000012F0  4E4F                     285          trap        #15
000012F2                           286         
000012F2  4EB9 005C6472            287          jsr         DisplayBackground
000012F8  4EB9 005C6834            288          jsr         DisplayAllBins
000012FE                           289          
000012FE  4EB9 00001412            290          jsr         SwapBuffers
00001304                           291          
00001304  06B9 00000258 005C69E8   292          add.l       #600,time
0000130E                           293  
0000130E  4E75                     294          rts       
00001310                           295   
00001310                           296  ********** TIME-BASED MOVEMENT ****************************
00001310                           297  FindDeltaTime
00001310  23F9 005C69B4 005C69B0   298          move.l      currentFrameTime,lastFrameTime
0000131A  4EB9 00001328            299          jsr         GetTime
00001320  4EB9 00001334            300          jsr         CalcDeltaTime
00001326  4E75                     301          rts
00001328                           302          
00001328                           303  GetTime
00001328  7008                     304          move.l      #GET_TIME_COMMAND,d0
0000132A  4E4F                     305          trap        #15
0000132C                           306          
0000132C  23C1 005C69B4            307          move.l      d1,currentFrameTime
00001332  4E75                     308          rts
00001334                           309          
00001334                           310  CalcDeltaTime
00001334  2039 005C69B4            311          move.l       currentFrameTime,d0
0000133A  90B9 005C69B0            312          sub.l        lastFrameTime,d0
00001340  23C0 005C69B8            313          move.l       d0,deltaTime
00001346  4E75                     314          rts
00001348                           315  
00001348                           316  * calc for time-based movement       
00001348                           317  CalcVelocity
00001348  700C                     318          move.l      #CONST_VELOCITY,d0
0000134A  2239 005C69B8            319          move.l      deltaTime,d1
00001350  C0C1                     320          mulu.w      d1,d0
00001352  23C0 005C69E4            321          move.l      d0,velocity
00001358  4E75                     322          rts
0000135A                           323  ************************************************************       
0000135A                           324  FillBackground
0000135A  7051                     325          move.l      #FILL_COLOR_COMMAND,d0
0000135C  223C 00DCA399            326          move.l      #BACKGROUND_COLOR,d1
00001362  4E4F                     327          trap        #15
00001364                           328          
00001364  7059                     329          move.l      #FLOOD_FILL_COMMAND,d0
00001366  323C 0000                330          move.w      #0,d1
0000136A  343C 0000                331          move.w      #0,d2
0000136E  4E4F                     332          trap        #15
00001370  4E75                     333          rts
00001372                           334  
00001372                           335  RandomObjDrop
00001372                           336          * change in position 
00001372  2039 005C69D0            337          move.l      randomObjPosY,d0
00001378  D0B9 005C69E4            338          add.l       velocity,d0
0000137E  23C0 005C69D0            339          move.l      d0,randomObjPosY
00001384  4E75                     340          rts
00001386                           341         
00001386                           342  ************ SEVEN SEG DISPLAY ******************************
00001386                           343  DisplayScore
00001386  23FC 00000000 005C6A00   344          move.l      #0,numberToDisplay
00001390  23F9 005C69FC 005C6A00   345          move.l      score,numberToDisplay
0000139A                           346          
0000139A  23EF 0004 005C6A04       347          move.l      4(sp),centerX
000013A2  23EF 0008 005C6A08       348          move.l      8(sp),centerY
000013AA  4EB9 005C6512            349          jsr         sevenSegDisplay 
000013B0  4E75                     350          rts   
000013B2                           351          
000013B2                           352  CalcScore
000013B2                           353          * adding to score
000013B2  4280                     354          clr.l       d0
000013B4  2039 005C69FC            355          move.l      score,d0
000013BA  D0B9 005C6A1C            356          add.l       pointsToAdd,d0
000013C0  23C0 005C69FC            357          move.l      d0,score
000013C6  23FC 00000000 005C6A1C   358          move.l      #0,pointsToAdd
000013D0  4E75                     359          rts
000013D2  4E75                     360          rts
000013D4                           361  
000013D4                           362  DisplayCountdownTimer
000013D4  52B9 005C69EC            363          addq.l      #1,binMixCounter
000013DA  2039 005C69E8            364          move.l      time,d0
000013E0  90B9 005C69B8            365          sub.l       deltaTime,d0
000013E6  23C0 005C69E8            366          move.l      d0,time
000013EC  80FC 0064                367          divu.w      #100,d0
000013F0  4281                     368          clr.l       d1
000013F2  3200                     369          move.w      d0,d1
000013F4                           370          
000013F4  23C1 005C6A00            371          move.l      d1,numberToDisplay
000013FA  23EF 0004 005C6A04       372          move.l      4(sp),centerX
00001402  23EF 0008 005C6A08       373          move.l      8(sp),centerY
0000140A  4EB9 005C6512            374          jsr         sevenSegDisplay   
00001410  4E75                     375          rts  
00001412                           376          
00001412                           377  ************************************************************
00001412                           378          
00001412                           379  SwapBuffers
00001412  103C 005E                380          move.b  #REPAINT_SCREEN_COMMAND,d0
00001416  4E4F                     381          trap    #15
00001418  4E75                     382          rts             
0000141A                           383          
0000141A  FFFF FFFF                384      SIMHALT             ; halt simulator        
0000141E                           385  * Put program code here
0000141E                           386  
0000141E                           387      INCLUDE             "Movement.X68"
0000141E                           388  
0000141E                           389  ALL_REG                 REG     D0-D5/A0-A6
0000141E  =00000041                390  KEY_LEFT_INPUT          equ     $41
0000141E  =00000044                391  KEY_RIGHT_INPUT         EQU     $44
0000141E  =00000053                392  KEY_DOWN_INPUT          EQU     $53
0000141E  =00000013                393  GET_KEY_INPUT_COMMAND   EQU     19
0000141E  =0000000B                394  CLEAR_SCREEN            EQU     11
0000141E  =0000FF00                395  CLEAR_SCREEN_MAGIC_VAL  EQU     $FF00
0000141E  =00000057                396  DRAW_RECTANGLE          EQU     87
0000141E  =00000021                397  GET_SCREEN_SIZE         EQU     33
0000141E  =00000051                398  FILL_COLOR              EQU     81
0000141E  =00000050                399  PEN_COLOR               EQU     80
0000141E  =00000056                400  MOVE_OBJECT_POSITION    EQU     86 
0000141E                           401  
0000141E                           402  InitData
0000141E  4287                     403          clr.l   d7
00001420  7441                     404          move.l  #$41,d2
00001422  4E75                     405          rts
00001424                           406  CheckInput  
00001424  103C 0013                407          move.b  #GET_KEY_INPUT_COMMAND,d0
00001428  2202                     408          move.l  d2,d1
0000142A  4E4F                     409          TRAP    #15
0000142C  0C01 0000                410          cmpi.b  #0,d1
00001430  6700 0048                411          beq     noInput
00001434                           412  
00001434  4EB9 0000143A            413          jsr     callFunction
0000143A                           414  
0000143A                           415  CallFunction
0000143A                           416  
0000143A  48E7 FCFE                417          movem.l ALL_REG,-(sp)
0000143E  41F9 000015A8            418          lea     FunctionTable,a0
00001444  0482 00000041            419          sub.l   #$41,d2
0000144A  E58A                     420          lsl.l   #2,d2
0000144C  2230 2000                421          move.l  (a0,d2),d1
00001450  0C81 00000000            422          cmpi.l  #0,d1
00001456  6700 0020                423          beq     noFuncPtr
0000145A                           424          
0000145A  23FC 00000000 005C69AC   425          move.l  #0,currentFrameKeyDown
00001464  23FC 00000000 005C6A10   426          move.l  #0,objIsMoving
0000146E  2241                     427          move.l  d1,a1
00001470  4E91                     428          jsr     (a1)  
00001472  4CDF 7F3F                429          movem.l (sp)+,ALL_REG
00001476  588F                     430          add.l   #4,sp
00001478                           431          
00001478                           432  NoFuncPtr
00001478  4E75                     433          rts
0000147A                           434  
0000147A                           435  NoInput
0000147A                           436          *bump to next ascii value
0000147A  5282                     437          add.l    #1,d2
0000147C  0C02 0054                438          cmpi.b   #$54,d2
00001480  66A2                     439          bne      CheckInput
00001482  4EF8 141E                440          jmp      InitData
00001486                           441  
00001486                           442  
00001486                           443  Center
00001486                           444         *high 16 bits = width
00001486                           445         *low 16 bits = height
00001486                           446         *divide by 2 to get center
00001486                           447         
00001486  7021                     448         move.l   #GET_SCREEN_SIZE,d0
00001488  323C 0000                449         move.w   #0,d1
0000148C  4E4F                     450         trap     #15
0000148E                           451         
0000148E  33C1 005C69F0            452         move.w   d1,screenHeight
00001494  3A01                     453         move.w   d1,d5
00001496                           454         
00001496  45F9 000015A6            455         lea      objectPosY,a2
0000149C  E24D                     456         lsr.w    #1,d5
0000149E  3485                     457         move.w   d5,(a2)
000014A0                           458         
000014A0  4841                     459         swap     d1
000014A2                           460         
000014A2  33C1 005C69F2            461         move.w   d1,screenWidth
000014A8  45F9 000015A4            462         lea      objectPosX,a2
000014AE  E249                     463         lsr.w    #1,d1
000014B0  3481                     464         move.w   d1,(a2)
000014B2                           465         
000014B2  4E75                     466         rts
000014B4                           467          
000014B4                           468  RestartScreen
000014B4                           469    * Clears screen and resets drawing point at the center
000014B4  700B                     470          move.l   #CLEAR_SCREEN,d0
000014B6  323C FF00                471          move.w   #CLEAR_SCREEN_MAGIC_VAL,d1
000014BA  4E4F                     472          trap     #15
000014BC  4EB8 1486                473          jsr      center
000014C0                           474          
000014C0  4E75                     475          rts
000014C2                           476  
000014C2                           477  
000014C2                           478  SortLeft  * if A is pressed, update graphics and indicate which bin the object was sorted into
000014C2  48E7 FCFE                479          movem.l ALL_REG,-(sp)
000014C6                           480          
000014C6  23F9 005C69BC 005C69F4   481          move.l  leftBin,chosenBin  
000014D0  4CDF 7F3F                482          movem.l (sp)+,ALL_REG
000014D4  4E75                     483          rts
000014D6                           484  
000014D6                           485  SortRight
000014D6  48E7 FCFE                486          movem.l ALL_REG,-(sp) 
000014DA                           487          
000014DA  23F9 005C69C0 005C69F4   488          move.l  rightBin,chosenBin
000014E4  4CDF 7F3F                489          movem.l (sp)+,ALL_REG
000014E8  4E75                     490          rts
000014EA                           491  
000014EA                           492  SortDown
000014EA  48E7 FCFE                493          movem.l ALL_REG,-(sp)   
000014EE                           494  
000014EE  23F9 005C69C4 005C69F4   495          move.l  downBin,chosenBin
000014F8  4CDF 7F3F                496          movem.l (sp)+,ALL_REG
000014FC  4E75                     497          rts
000014FE                           498          
000014FE                           499          
000014FE                           500  ObjMovement
000014FE  2039 005C69F4            501          move.l      chosenBin,d0
00001504  B0B9 005C69BC            502          cmp.l       leftBin,d0
0000150A  6700 0018                503          beq         LeftBinMove
0000150E                           504          
0000150E  B0B9 005C69C0            505          cmp.l       rightBin,d0
00001514  6700 0032                506          beq         RightBinMove
00001518                           507          
00001518  B0B9 005C69C4            508          cmp.l       downBin,d0
0000151E  6700 004C                509          beq         DownBinMove
00001522                           510          
00001522  4E75                     511          rts
00001524                           512  
00001524                           513  LeftBinMove
00001524                           514          *check boundary
00001524  4EB9 005C67FA            515          jsr         ObjInval
0000152A  2039 005C69CC            516          move.l      randomObjPosX,d0
00001530  90B9 005C69E4            517          sub.l       velocity,d0
00001536  23C0 005C69CC            518          move.l      d0,randomObjPosX
0000153C                           519          
0000153C  0C80 00000000            520          cmpi.l      #0,d0
00001542  6D00 004C                521          blt         BinMoveEnd
00001546  4E75                     522          rts
00001548                           523  
00001548                           524  
00001548                           525  RightBinMove
00001548                           526    *check boundary
00001548                           527          
00001548  4EB9 005C67FA            528          jsr         ObjInval
0000154E  2039 005C69CC            529          move.l      randomObjPosX,d0
00001554  D0B9 005C69E4            530          add.l       velocity,d0
0000155A  23C0 005C69CC            531          move.l      d0,randomObjPosX
00001560                           532          
00001560  0C80 000002A8            533          cmpi.l      #680,d0
00001566  6E00 0028                534          bgt         BinMoveEnd
0000156A  4E75                     535          rts
0000156C                           536          
0000156C                           537  
0000156C                           538  DownBinMove
0000156C                           539            *check boundary
0000156C                           540  
0000156C                           541          
0000156C  4EB9 005C67FA            542          jsr         ObjInval
00001572  2039 005C69D0            543          move.l      randomObjPosY,d0
00001578  D0B9 005C69E4            544          add.l       velocity,d0
0000157E  23C0 005C69D0            545          move.l      d0,randomObjPosY
00001584                           546  
00001584  0C80 000001E0            547          cmpi.l      #480,d0
0000158A  6E00 0004                548          bgt         BinMoveEnd
0000158E  4E75                     549          rts
00001590                           550  
00001590                           551  BinMoveEnd
00001590  4EB9 005C6888            552          jsr         ChosenBinInval
00001596  23FC 00000001 005C6A10   553          move.l      #1,objIsMoving
000015A0  4E75                     554          rts 
000015A2                           555  
000015A2                           556  
000015A2                           557  
000015A2                           558  HAVE_HAD_NO_INPUT  ds.b    1
000015A3                           559  
000015A4                           560  objectPosX         ds.w    1
000015A6                           561  objectPosY         ds.w    1
000015A8                           562  functionTable   
000015A8                           563                  *0-9
000015A8= 000014C2 00000000 ...    564                  dc.l    SortLeft,0,0,SortRight,0,0,0
000015C4= 00000000 00000000 ...    565                  dc.l    0,0,0,0,0,0,0
000015E0= 00000000 00000000 ...    566                  dc.l    0,0,0,0,SortDown,0
000015F8                           567  
000015F8                           568  
000015F8                           569  
000015F8                           570  
000015F8                           571  
000015F8                           572  
000015F8                           573  
000015F8                           574  
000015F8                           575  
000015F8                           576  
000015F8                           577  
000015F8                           578  
000015F8                           579  
000015F8                           580  
000015F8                           581  
000015F8                           582  
000015F8                           583  
000015F8                           584  
000015F8                           585  
000015F8                           586  
000015F8                           587  
000015F8                           588  
000015F8                           589  
000015F8                           590  
000015F8                           591  
000015F8                           592  
000015F8                           593  
000015F8                           594  
000015F8                           595  
000015F8                           596  
000015F8                           597  
000015F8                           598  
000015F8                           599  
000015F8                           600  
000015F8                           601  
000015F8                           602  
000015F8                           603  -------------------- end include --------------------
000015F8                           604      INCLUDE             "CheckObjectType.X68"
000015F8  =00000002                605  GOLD_OBJ            EQU  2
000015F8                           606   
000015F8                           607  
000015F8                           608  
000015F8                           609  
000015F8                           610  CheckObjSorted
000015F8  23FC 00000000 005C6A1C   611      move.l  #0,pointsToAdd
00001602  2039 005C6A14            612      move.l  randomObjToSort,d0
00001608  B0BC 00000002            613      cmp.l   #GOLD_OBJ,d0
0000160E  6700 0006                614      beq     GoldCondition
00001612                           615      
00001612  6000 003A                616      bra     RegularCondition
00001616                           617  
00001616                           618  GoldCondition
00001616  2039 005C69F4            619      move.l  chosenBin,d0
0000161C  B0B9 005C6A14            620      cmp.l   randomObjToSort,d0
00001622  6600 000E                621      bne     WrongGoldBin
00001626                           622      
00001626                           623  CorrectGoldBin
00001626  06B9 00000014 005C6A1C   624      add.l   #20,pointsToAdd
00001630  4E75                     625      rts
00001632                           626  
00001632                           627  WrongGoldBin
00001632  2039 005C69FC            628      move.l  score,d0
00001638  0C80 00000028            629      cmpi.l  #40,d0
0000163E  6D00 0040                630      blt     FinishGoldCondition
00001642                           631      
00001642  04B9 00000014 005C6A1C   632      sub.l   #20,pointsToAdd
0000164C  4E75                     633      rts
0000164E                           634      
0000164E                           635  RegularCondition
0000164E  B0B9 005C69F4            636      cmp.l   chosenBin,d0
00001654  6600 0010                637      bne     WrongBin     
00001658                           638      
00001658                           639  CorrectBin
00001658  06B9 0000000A 005C6A1C   640      add.l   #10,pointsToAdd
00001662  6000 001A                641      bra     FinishRegCondition
00001666                           642      
00001666                           643  WrongBin
00001666  0CB9 00000000 005C69FC   644      cmpi.l  #0,score
00001670  6700 000C                645      beq     FinishRegCondition
00001674                           646      
00001674  04B9 0000000A 005C69FC   647      sub.l   #10,score
0000167E                           648      
0000167E                           649  
0000167E                           650  FinishRegCondition
0000167E  4E75                     651      rts
00001680                           652      
00001680                           653  FinishGoldCondition
00001680  23FC 00000000 005C69FC   654      move.l  #0,score
0000168A  4E75                     655      rts
0000168C                           656        
0000168C                           657  
0000168C                           658  
0000168C                           659  
0000168C                           660  
0000168C                           661  
0000168C                           662  
0000168C                           663  
0000168C                           664  
0000168C                           665  -------------------- end include --------------------
0000168C                           666      INCLUDE             "BMP_32Bit_Subroutine.X68"
0000168C  =00000050                667  PEN_COLOR_TRAP_CODE             EQU     80
0000168C  =00000052                668  DRAW_PIXEL_TRAP_CODE            EQU     82
0000168C  =00000021                669  SET_OUTPUT_RESOLUTION_TRAP_CODE EQU     33 
0000168C  =0000FF65                670  TRANSPARENT_COLOR               EQU     $0000FF65
0000168C                           671   
0000168C  =0000424D                672  FILE_SIGNATURE                  EQU     $424D
0000168C  =0000000D                673  PRINT_STRING_CR_LF              EQU     13
0000168C                           674  
0000168C  =0000000A                675  HEADER_STARTING_ADDRESS_OFFSET  EQU     10
0000168C  =00000012                676  HEADER_WIDTH_OFFSET             EQU     18
0000168C  =00000016                677  HEADER_HEIGHT_OFFSET            EQU     22
0000168C  =0000001C                678  HEADER_BITSPPIXEL               EQU     28
0000168C                           679  
0000168C                           680  
0000168C                           681  Check_File_Error
0000168C  700D                     682      move.l  #PRINT_STRING_CR_LF,d0           
0000168E  43F9 005C61BC            683      lea     ErrorMessage_WrongSignature, a1
00001694  4E4F                     684      TRAP    #15
00001696  FFFF FFFF                685      SIMHALT
0000169A                           686  
0000169A                           687  Check_File
0000169A  41F9 00001876            688      lea     START_OF_DATA,a0
000016A0  3018                     689      move.w  (a0)+,d0
000016A2  B07C 424D                690      cmp.w   #FILE_SIGNATURE,d0   
000016A6  66E4                     691      bne     Check_File_Error
000016A8  4E75                     692      rts
000016AA                           693  Initialize
000016AA  45F9 005C6200            694      lea  SelectionWidth,a2
000016B0  24AF 0008                695      move.l  8(sp),(a2)
000016B4                           696      
000016B4  45F9 005C6204            697      lea  SelectionHeight,a2   
000016BA  24AF 000C                698      move.l  12(sp),(a2)
000016BE                           699      
000016BE  45F9 005C61FC            700      lea  SelectionPosY,a2   
000016C4  24AF 0010                701      move.l  16(sp),(a2)
000016C8                           702      
000016C8  45F9 005C61F8            703      lea  SelectionPosX,a2
000016CE  24AF 0014                704      move.l  20(sp),(a2)
000016D2                           705      
000016D2  45F9 005C61E6            706      lea     BMPosY,a2
000016D8  24AF 0018                707      move.l  24(sp),(a2)  
000016DC                           708  
000016DC  45F9 005C61DE            709      lea     BMPosYDraw,a2
000016E2  24B9 005C61E6            710      move.l  BMPosY,(a2)  
000016E8                           711    
000016E8  45F9 005C61E2            712      lea     BMPosX,a2
000016EE  24AF 001C                713      move.l  28(sp),(a2) 
000016F2                           714    
000016F2  45F9 005C61DA            715      lea     BMPosXDraw,a2
000016F8  24B9 005C61E2            716      move.l  BMPosX,(a2) 
000016FE                           717      
000016FE  4E75                     718      rts
00001700                           719      
00001700                           720  SetScreenResolution
00001700                           721      
00001700                           722      * Set Screen Resolution
00001700  103C 0021                723      move.b  #SET_OUTPUT_RESOLUTION_TRAP_CODE,d0
00001704  2239 005C69F0            724      move.l  ScreenHeight,d1
0000170A  4841                     725      swap    d1
0000170C  4E4F                     726      trap    #15
0000170E  4E75                     727      rts
00001710                           728  
00001710                           729  Display
00001710  4EB8 169A                730      jsr     Check_File
00001714                           731      
00001714  4EB8 16AA                732      jsr     Initialize
00001718                           733      
00001718  4EB9 00001820            734      jsr     BM_Header           ; load header info into variables
0000171E                           735      
0000171E  4EB9 000017B2            736      jsr     Set_Selection      ; set selection of pixels to print
00001724                           737  
00001724  7A00                     738      move.l  #0,d5              ; sets  d4 to true to indicate first iteration case
00001726                           739      
00001726  4EB9 0000177E            740      jsr     Next_Row   
0000172C                           741      
0000172C  4E75                     742      rts     
0000172E                           743  
0000172E                           744  Endian_Conversion
0000172E  202F 0004                745      move.l  4(sp),d0        
00001732  E158                     746      rol.w   #8,d0           
00001734  4840                     747      swap    d0              
00001736  E158                     748      rol.w   #8,d0           
00001738                           749      
00001738  4E75                     750      rts
0000173A                           751  Color_32bit
0000173A  103C 0050                752      move.b  #PEN_COLOR_TRAP_CODE,d0 ; sets pen color
0000173E                           753      
0000173E  2818                     754      move.l  (a0)+,d4
00001740  E08C                     755      lsr.l   #8,d4      
00001742  2204                     756      move.l  d4,d1
00001744                           757     
00001744  4E4F                     758      trap    #15
00001746                           759      
00001746  4E75                     760      rts
00001748                           761  
00001748                           762  Draw_Row
00001748  7A01                     763      move.l  #1,d5                      ; sets d4 to false to show program has starting drawing rows
0000174A  4EB8 173A                764      jsr     Color_32bit
0000174E  B8BC 0000FF65            765      cmp.l   #TRANSPARENT_COLOR,d4       ; checks for transparent color
00001754  6700 0014                766      beq     Move_To_Next_Draw_Pos   
00001758                           767      
00001758  103C 0052                768      move.b  #DRAW_PIXEL_TRAP_CODE,d0    ; draws pixel with set color at specified position
0000175C  2239 005C61DA            769      move.l  BMPosXDraw,d1                  ; draws pixel at specified position
00001762  2439 005C61DE            770      move.l  BMPosYDraw,d2
00001768  4E4F                     771      trap    #15
0000176A                           772  
0000176A                           773  Move_To_Next_Draw_Pos   
0000176A  52B9 005C61DA            774      addq.l  #1,BMPosXDraw               ; points to the next x position
00001770  5283                     775      addq.l  #1,d3                       ; counter to ensure only the width amount of pixels are drawn per row
00001772                           776      
00001772  B6B9 005C6200            777      cmp.l   SelectionWidth,d3          ; ensures only width amount of pixels are drawn per row
00001778  6700 0004                778      beq     Next_Row
0000177C                           779      
0000177C  60CA                     780      bra     Draw_Row
0000177E                           781    
0000177E                           782  Next_Row
0000177E  0C85 00000000            783      cmpi.l  #0,d5                   ; if true, skip first iteration of next_row 
00001784  67C2                     784      beq     Draw_Row
00001786                           785      
00001786  D1F9 005C620C            786      add.l   SelectionColorOffset,a0 ; skips rest of bytes for the row and moves pointer to next row in the pixel array
0000178C  23F9 005C61E2 005C61DA   787      move.l  BMPosX,BMPosXDraw              ; resets x position to its original
00001796                           788      
00001796  4283                     789      clr.l   d3                      ; resets the pixel per row counter
00001798  53B9 005C61DE            790      subq.l  #1,BMPosYDraw           ; moves pen to next y position
0000179E  53B9 005C6204            791      subq.l  #1,SelectionHeight
000017A4                           792      
000017A4  0CB9 00000001 005C6204   793      cmpi.l  #1,SelectionHeight              ; ensures there are only n height rows drawn
000017AE  6E98                     794      bgt     Draw_Row
000017B0                           795      
000017B0  4E75                     796      rts  
000017B2                           797        
000017B2                           798  Set_Selection
000017B2                           799  
000017B2  2439 005C61EA            800      move.l  BMWidth,d2
000017B8  3639 005C61F2            801      move.w  BMBitsPPixel,d3
000017BE                           802      
000017BE  2239 005C61F8            803      move.l  SelectionPosX,d1           ; x pos
000017C4  2039 005C61FC            804      move.l  SelectionPosY,d0           ; y pos
000017CA                           805      
000017CA  86FC 0008                806      divu.w  #8,d3                   ; getting the bytes per pixel
000017CE                           807   
000017CE  C4C3                     808      mulu.w  d3,d2                   ; image width x pytes per pixel
000017D0  C0C2                     809      mulu.w  d2,d0                   ; pos y * (image width x bytes per pixel)
000017D2  C2C3                     810      mulu.w  d3,d1                   ; pos x * (bytes per pixel)
000017D4                           811      
000017D4  D280                     812      add.l   d0,d1                   ; (y product) + (x product)
000017D6                           813      
000017D6  45F9 005C6208            814      lea     SelectionStartOffset,a2
000017DC  2481                     815      move.l  d1,(a2)                      ; assigning value of offset to the offset variable
000017DE  D1F9 005C6208            816      add.l   SelectionStartOffset,a0     ; setting new starting position within pixel array
000017E4                           817     
000017E4                           818      
000017E4  2039 005C61DE            819      move.l  BMPosYDraw,d0              ; setting pos y equal to the height of the image as well
000017EA  D0B9 005C6204            820      add.l   SelectionHeight,d0
000017F0  45F9 005C61DE            821      lea     BMPosYDraw, a2
000017F6  2480                     822      move.l  d0,(a2)
000017F8                           823      
000017F8  45F9 005C61E6            824      lea     BMPosY,a2
000017FE  24B9 005C6204            825      move.l  SelectionHeight,(a2) 
00001804                           826      
00001804                           827     
00001804  2039 005C6200            828      move.l  SelectionWidth,d0      ; getting the sub-image selection width
0000180A  2239 005C61EA            829      move.l  BMWidth,d1             ; getting the original image width
00001810                           830      
00001810  9280                     831      sub.l   d0,d1                   ; OG width - subwidth = # of bytes to skip for the next row
00001812                           832      
00001812  C2C3                     833      mulu.w  d3,d1                   ; multiplying by # of bytes per pixel for 24 bit image
00001814                           834  
00001814                           835   
00001814  45F9 005C620C            836      lea     SelectionColorOffset,a2 ; assigning value to a variable 
0000181A  2481                     837      move.l  d1,(a2)
0000181C                           838   
0000181C  4283                     839      clr.l   d3                      ; clearing d3 register   
0000181E  4E75                     840      rts
00001820                           841  
00001820                           842  
00001820                           843  BM_Header
00001820  41F9 00001876            844      lea     START_OF_DATA,a0
00001826                           845      
00001826                           846      * recording address of first element of pixel array
00001826  2F28 000A                847      move.l  HEADER_STARTING_ADDRESS_OFFSET(a0),-(sp)        ; offset to find starting address
0000182A  4EB8 172E                848      jsr     Endian_Conversion                   ; little to big endian conversion
0000182E  588F                     849      add.l   #4,sp                               ; fix stack
00001830  45F9 005C61D6            850      lea     BMStart,a2                          ; moves address BM_width is stored at into register a2
00001836  2480                     851      move.l  d0,(a2)                             ; storing starting address offset value in BM_Start
00001838                           852      
00001838                           853      * recording width of BM
00001838  2F28 0012                854      move.l  HEADER_WIDTH_OFFSET(a0),-(sp)       ; offset from starting address to find value of width
0000183C  4EB8 172E                855      jsr     Endian_Conversion                   ; little to big endian conversion
00001840  588F                     856      add.l   #4,sp                               ; fix stack
00001842  45F9 005C61EA            857      lea     BMWidth,a2                          ; moves address BM_width is stored at into register a2
00001848  2480                     858      move.l  d0,(a2)                             ; storing width value in BM_width
0000184A                           859      
0000184A                           860      * recording height of BM
0000184A  2F28 0016                861      move.l  HEADER_HEIGHT_OFFSET(a0),-(sp)      ; offset from starting address to find value of width
0000184E  4EB8 172E                862      jsr     Endian_Conversion  
00001852  588F                     863      add.l   #4,sp               
00001854  45F9 005C61EE            864      lea     BMHeight,a2        
0000185A  2480                     865      move.l  d0,(a2)            
0000185C                           866      
0000185C                           867      * recording the BM's bits per pixel
0000185C  2F28 001C                868      move.l  HEADER_BITSPPIXEL(a0),-(sp)         ; offset to find the number of bits per pixel of BM
00001860  4EB8 172E                869      jsr     Endian_Conversion  
00001864  588F                     870      add.l   #4,sp               
00001866  45F9 005C61F2            871      lea     BMBitsPPixel,a2    
0000186C  3480                     872      move.w  d0,(a2)            
0000186E                           873      
0000186E  D1F9 005C61D6            874      add.l   BMStart,a0         ; setting pointer to start of pixel array
00001874                           875      
00001874  4E75                     876      rts
00001876                           877  
00001876                           878  
00001876                           879  START_OF_DATA
00001876                           880  DataFromBMP         INCBIN "TrashSortAssets.bmp"
005C61BC                           881  END_OF_DATA
005C61BC                           882  
005C61BC                           883  
005C61BC= 49 6E 63 6F 72 72 ...    884  ErrorMessage_WrongSignature dc.b 'Incorrect File Signature', 0
005C61D5                           885  
005C61D6                           886  BMStart            ds.l    1
005C61DA                           887  BMPosXDraw         ds.l    1
005C61DE                           888  BMPosYDraw         ds.l    1
005C61E2                           889  BMPosX             ds.l    1   
005C61E6                           890  BMPosY             ds.l    1
005C61EA                           891  BMWidth            ds.l    1
005C61EE                           892  BMHeight           ds.l    1
005C61F2                           893  BMBitsPPixel       ds.w    1
005C61F4                           894  PaddingBytes        ds.l    1
005C61F8                           895  SelectionPosX          ds.l    1
005C61FC                           896  SelectionPosY          ds.l    1
005C6200                           897  Selectionwidth         ds.l    1
005C6204                           898  SelectionHeight        ds.l    1
005C6208                           899  SelectionStartOffset   ds.l    1
005C620C                           900  SelectionColorOffset   ds.l    1
005C6210                           901  
005C6210                           902  
005C6210                           903  
005C6210                           904  
005C6210                           905  
005C6210                           906  
005C6210                           907  
005C6210                           908  
005C6210                           909  
005C6210                           910  
005C6210                           911  -------------------- end include --------------------
005C6210                           912      INCLUDE             "RandomObjectGenerator.X68"
005C6210  =00000008                913  GET_TIME_COMMAND        EQU     8
005C6210                           914  
005C6210                           915  ;Seed the random number generator using the current time
005C6210                           916  seedRandomNumber
005C6210  48E7 FCFE                917          movem.l ALL_REG,-(sp)      ; Save registers
005C6214  4286                     918          clr.l   d6
005C6216  103C 0008                919          move.b  #GET_TIME_COMMAND,d0
005C621A  4E4F                     920          TRAP    #15
005C621C                           921  
005C621C  23C1 005C62CA            922          move.l  d1,RANDOMVAL
005C6222  4CDF 0007                923          movem.l (sp)+,d0-d2      ; Restore registers
005C6226  4E75                     924          rts
005C6228                           925  
005C6228                           926  ;Generate a random byte and store it in d6
005C6228                           927  getRandomByteIntoD6
005C6228  48E7 E000                928          movem.l d0-d2,-(sp)      ; Save registers
005C622C  2039 005C62CA            929          move.l  RANDOMVAL,d0
005C6232  72AF                     930          moveq   #$AF-$100,d1
005C6234  7412                     931          moveq   #18,d2
005C6236                           932  Ninc0
005C6236  D080                     933          add.l   d0,d0
005C6238  6400 0004                934          bcc     Ninc1
005C623C  B300                     935          eor.b   d1,d0
005C623E                           936  Ninc1
005C623E  51CA FFF6                937          dbf     d2,Ninc0
005C6242                           938  
005C6242  23C0 005C62CA            939          move.l  d0,RANDOMVAL
005C6248                           940  
005C6248  2C00                     941          move.l  d0,d6            ; Store random value in d6
005C624A                           942  
005C624A  4CDF 0007                943          movem.l (sp)+,d0-d2      ; Restore registers
005C624E  4E75                     944          rts
005C6250                           945  
005C6250                           946  ;Generate a random number between 0 and 2 and store it in d7
005C6250                           947  RandomObjGenerator
005C6250  4EB9 005C6228            948          jsr     getRandomByteIntoD6
005C6256  2006                     949          move.l  d6,d0            ; Move the random value to d0
005C6258  0280 000000FF            950          andi.l  #$FF,d0          ; Ensure it is within byte range
005C625E  80FC 0003                951          divu    #3,d0            ; Divide by 3 to get remainder (0, 1, or 2)
005C6262  4840                     952          swap    d0
005C6264  5280                     953          addq.l  #1,d0
005C6266  1E00                     954          move.b  d0,d7            ; Move result to d7
005C6268                           955  
005C6268  4E75                     956          rts
005C626A                           957  RandomBinGenerator
005C626A  4EB9 005C6250            958          jsr     RandomObjGenerator
005C6270  23C7 005C69BC            959          move.l  d7,leftBin
005C6276                           960          
005C6276  0C87 00000003            961          cmpi.l  #3,d7
005C627C  6700 001E                962          beq     ZeroCondition
005C6280                           963          
005C6280  7003                     964          move.l  #3,d0
005C6282  90B9 005C69BC            965          sub.l   leftBin,d0
005C6288                           966          
005C6288  23C0 005C69C4            967          move.l  d0,downBin
005C628E                           968          
005C628E  D0B9 005C69BC            969          add.l   leftBin,d0
005C6294  23C0 005C69C0            970          move.l  d0,rightBin
005C629A  4E75                     971          rts
005C629C                           972          
005C629C                           973  ZeroCondition
005C629C  4EB9 005C6228            974          jsr     getRandomByteIntoD6
005C62A2  2006                     975          move.l  d6,d0            ; Move the random value to d0
005C62A4  0280 000000FF            976          andi.l  #$FF,d0          ; Ensure it is within byte range
005C62AA  80FC 0002                977          divu    #2,d0            ; Divide by 2 to get remainder (0 or 1)
005C62AE  4840                     978          swap    d0
005C62B0  5280                     979          addq.l  #1,d0
005C62B2  1E00                     980          move.b  d0,d7            ; Move result to d7
005C62B4  23C7 005C69C4            981          move.l  d7,downBin        ; set downBin equal to random value
005C62BA                           982  
005C62BA  7003                     983          move.l  #3,d0
005C62BC  90B9 005C69C4            984          sub.l   downBin,d0
005C62C2                           985          
005C62C2  23C0 005C69C0            986          move.l  d0,rightBin        
005C62C8  4E75                     987          rts
005C62CA                           988          
005C62CA                           989          
005C62CA                           990          
005C62CA                           991          
005C62CA                           992          
005C62CA                           993  Variables
005C62CA                           994  RANDOMVAL       ds.l    1
005C62CE                           995  
005C62CE                           996  
005C62CE                           997  
005C62CE                           998  
005C62CE                           999  
005C62CE                          1000  
005C62CE                          1001  -------------------- end include --------------------
005C62CE                          1002      INCLUDE             "DisplayRandomObject.X68"
005C62CE                          1003  DisplayRandomObj                
005C62CE                          1004          * if random obj is recycle, find on bitmap to print
005C62CE  2039 005C6A14           1005          move.l      randomObjToSort,d0
005C62D4                          1006          
005C62D4                          1007         
005C62D4  0C80 00000001           1008          cmpi.l      #1,d0
005C62DA  6700 002E               1009          beq         DisplayRecycleObj
005C62DE                          1010          
005C62DE  0C80 00000002           1011          cmpi.l      #2,d0
005C62E4  6700 0092               1012          beq         DisplayGoldObj
005C62E8                          1013          
005C62E8  0C80 00000003           1014          cmpi.l      #3,d0
005C62EE  6700 0050               1015          beq         DisplayTrashObj
005C62F2                          1016          
005C62F2                          1017  DisplayRandomObjEnd       
005C62F2  2F01                    1018          move.l      d1,-(sp) ; Screen pos x
005C62F4  2F02                    1019          move.l      d2,-(sp) ; Screen pos y
005C62F6  2F03                    1020          move.l      d3,-(sp) ; Selection Position X
005C62F8  2F04                    1021          move.l      d4,-(sp) ; Selection Position Y
005C62FA  2F05                    1022          move.l      d5,-(sp) ;HEIGHT
005C62FC  2F06                    1023          move.l      d6,-(sp) ;WIDTH
005C62FE  4EB8 1710               1024          jsr         display
005C6302  DFFC 00000018           1025          add.l       #24,sp
005C6308  4E75                    1026          rts 
005C630A                          1027  
005C630A                          1028              
005C630A                          1029  DisplayRecycleObj
005C630A  23FC 0000003C 005C69DC  1030          move.l      #60,invalHeight
005C6314  23FC 0000003E 005C69E0  1031          move.l      #62,invalWidth
005C631E                          1032          
005C631E  2239 005C69CC           1033          move.l      randomObjPosX,d1
005C6324  2439 005C69D0           1034          move.l      randomObjPosY,d2
005C632A  263C 00000327           1035          move.l      #807,d3 ; Selection Position X
005C6330  7801                    1036          move.l      #1,d4 ; Selection Position Y
005C6332  2A39 005C69DC           1037          move.l      invalHeight,d5 ;HEIGHT
005C6338  2C39 005C69E0           1038          move.l      invalWidth,d6 ;WIDTH
005C633E                          1039          
005C633E                          1040          
005C633E  60B2                    1041          bra         DisplayRandomObjEnd
005C6340                          1042          
005C6340                          1043  
005C6340                          1044  DisplayTrashObj
005C6340  23FC 0000003D 005C69DC  1045          move.l      #61,invalHeight
005C634A  23FC 0000003D 005C69E0  1046          move.l      #61,invalWidth
005C6354                          1047          
005C6354  2239 005C69CC           1048          move.l      randomObjPosX,d1 
005C635A  2439 005C69D0           1049          move.l      randomObjPosY,d2 
005C6360  263C 000003B9           1050          move.l      #953 ,d3 
005C6366  7802                    1051          move.l      #2,d4 
005C6368  2A39 005C69DC           1052          move.l      invalHeight,d5 
005C636E  2C39 005C69E0           1053          move.l      invalWidth,d6 
005C6374  6000 FF7C               1054          bra         DisplayRandomObjEnd
005C6378                          1055  DisplayGoldObj
005C6378  23FC 00000037 005C69DC  1056          move.l      #55,invalHeight
005C6382  23FC 0000003B 005C69E0  1057          move.l      #59,invalWidth
005C638C                          1058          
005C638C  2239 005C69CC           1059          move.l      randomObjPosX,d1
005C6392  2439 005C69D0           1060          move.l      randomObjPosY,d2
005C6398  263C 0000037A           1061          move.l      #890,d3 
005C639E  7801                    1062          move.l      #1,d4 
005C63A0  2A39 005C69DC           1063          move.l      invalHeight,d5
005C63A6  2C39 005C69E0           1064          move.l      invalWidth,d6
005C63AC  6000 FF44               1065          bra         DisplayRandomObjEnd
005C63B0                          1066          
005C63B0                          1067  DisplayLoadingScreen
005C63B0                          1068          * "loading..." 
005C63B0  223C 000001CC           1069          move.l      #460,d1 ; Screen Position X
005C63B6  243C 000001A9           1070          move.l      #425,d2 ; Screen  Position Y
005C63BC  263C 000001D0           1071          move.l      #464,d3 ; Selection Position X
005C63C2  283C 00000299           1072          move.l      #665,d4 ; Selection Position Y
005C63C8  7A28                    1073          move.l      #40,d5 ;HEIGHT
005C63CA  2C3C 000000C4           1074          move.l      #196,d6 ;WIDTH  
005C63D0  4EB9 005C62F2           1075          jsr         DisplayRandomObjEnd
005C63D6                          1076          
005C63D6                          1077          * control instruction
005C63D6  223C 000000B4           1078          move.l      #180,d1 ; Screen Position X
005C63DC  243C 000000B8           1079          move.l      #184,d2 ; Screen  Position Y
005C63E2  263C 000000B1           1080          move.l      #177,d3 ; Selection Position X
005C63E8  283C 0000031A           1081          move.l      #794,d4 ; Selection Position Y
005C63EE  2A3C 000000A1           1082          move.l      #161,d5 ;HEIGHT
005C63F4  2C3C 0000011C           1083          move.l      #284,d6 ;WIDTH  
005C63FA  4EB9 005C62F2           1084          jsr         DisplayRandomObjEnd
005C6400                          1085                  
005C6400                          1086          
005C6400                          1087          * "sort"
005C6400  223C 000000F5           1088          move.l      #245,d1 ; Screen Position X
005C6406  243C 00000163           1089          move.l      #355,d2 ; Screen  Position Y
005C640C  263C 000000F5           1090          move.l      #245,d3 ; Selection Position X
005C6412  283C 000002D2           1091          move.l      #722,d4 ; Selection Position Y
005C6418  7A2F                    1092          move.l      #47,d5 ;HEIGHT
005C641A  2C3C 000000A3           1093          move.l      #163,d6 ;WIDTH  
005C6420  4EB9 005C62F2           1094          jsr         DisplayRandomObjEnd
005C6426                          1095          
005C6426                          1096          * example trash
005C6426  223C 000000FD           1097          move.l      #253,d1 ; Screen Position X
005C642C  742F                    1098          move.l      #47,d2 ; Screen  Position Y
005C642E  263C 00000100           1099          move.l      #256,d3 ; Selection Position X
005C6434  283C 000003C1           1100          move.l      #961,d4 ; Selection Position Y
005C643A  2A3C 00000080           1101          move.l      #128,d5 ;HEIGHT
005C6440  7C73                    1102          move.l      #115,d6 ;WIDTH  
005C6442  4EB9 005C62F2           1103          jsr         DisplayRandomObjEnd
005C6448  4E75                    1104          rts
005C644A                          1105  DisplayEnterScreen
005C644A  223C 0000009B           1106          move.l      #155,d1 ; Screen Position X
005C6450  243C 0000009B           1107          move.l      #155,d2 ; Screen  Position Y
005C6456  760E                    1108          move.l      #14,d3 ; Selection Position X
005C6458  283C 000001E3           1109          move.l      #483,d4 ; Selection Position Y
005C645E  2A3C 000000A6           1110          move.l      #166,d5 ;HEIGHT
005C6464  2C3C 00000179           1111          move.l      #377,d6 ;WIDTH            
005C646A  4EB9 005C62F2           1112          jsr         DisplayRandomObjEnd
005C6470  4E75                    1113          rts
005C6472                          1114          
005C6472                          1115  DisplayBackground
005C6472                          1116  
005C6472  7051                    1117          move.l      #FILL_COLOR_COMMAND,d0
005C6474  223C 009C6258           1118          move.l      #$009C6258,d1
005C647A  4E4F                    1119          trap        #15
005C647C                          1120          
005C647C  7059                    1121          move.l      #FLOOD_FILL_COMMAND,d0
005C647E  323C 0000               1122          move.w      #0,d1
005C6482  343C 0000               1123          move.w      #0,d2
005C6486  4E4F                    1124          trap        #15
005C6488                          1125          
005C6488                          1126          
005C6488  7200                    1127          move.l      #0,d1 ; Screen Position X
005C648A  7400                    1128          move.l      #0,d2 ; Screen  Position Y
005C648C  7600                    1129          move.l      #0,d3 ; Selection Position X
005C648E  283C 00000121           1130          move.l      #289,d4 ; Selection Position Y
005C6494  2A3C 000000BF           1131          move.l      #191,d5 ;HEIGHT
005C649A  2C3C 00000110           1132          move.l      #272,d6 ;WIDTH
005C64A0  4EB9 005C62F2           1133          jsr         DisplayRandomObjEnd
005C64A6                          1134          
005C64A6                          1135          
005C64A6  223C 0000017D           1136          move.l      #381,d1 ; Screen Position X
005C64AC  7400                    1137          move.l      #0,d2   ; Screen  Position Y
005C64AE  263C 0000017D           1138          move.l      #381,d3 ; Selection Position X
005C64B4  283C 00000121           1139          move.l      #289,d4 ; Selection Position Y
005C64BA  2A3C 000000C3           1140          move.l      #195,d5 ;HEIGHT
005C64C0  2C3C 0000012B           1141          move.l      #299,d6 ;WIDTH
005C64C6  4EB9 005C62F2           1142          jsr         DisplayRandomObjEnd
005C64CC                          1143          
005C64CC  7200                    1144          move.l      #0,d1 ; Screen Position X
005C64CE  243C 00000129           1145          move.l      #297,d2 ; Screen  Position Y
005C64D4  7600                    1146          move.l      #0,d3 ; Selection Position X
005C64D6  7800                    1147          move.l      #0,d4 ; Selection Position Y
005C64D8  2A3C 000000B8           1148          move.l      #184,d5 ;HEIGHT
005C64DE  2C3C 00000111           1149          move.l      #273,d6 ;WIDTH
005C64E4  4EB9 005C62F2           1150          jsr         DisplayRandomObjEnd
005C64EA                          1151          
005C64EA  223C 0000017D           1152          move.l      #381,d1 ; Screen Position X
005C64F0  243C 0000011E           1153          move.l      #286,d2 ; Screen  Position Y
005C64F6  263C 0000017D           1154          move.l      #381,d3 ; Selection Position X
005C64FC  7800                    1155          move.l      #0,d4 ; Selection Position Y
005C64FE  2A3C 000000C2           1156          move.l      #194,d5 ;HEIGHT
005C6504  2C3C 0000012B           1157          move.l      #299,d6 ;WIDTH
005C650A  4EB9 005C62F2           1158          jsr         DisplayRandomObjEnd
005C6510  4E75                    1159          rts  
005C6512                          1160  
005C6512                          1161  
005C6512                          1162  
005C6512                          1163  
005C6512                          1164  
005C6512                          1165  
005C6512                          1166  
005C6512                          1167  
005C6512                          1168  
005C6512                          1169  
005C6512                          1170  
005C6512                          1171  
005C6512                          1172  
005C6512                          1173  
005C6512                          1174  
005C6512                          1175  -------------------- end include --------------------
005C6512                          1176      INCLUDE             "SevenSegSubroutine.X68"
005C6512                          1177  
005C6512  =0000005D               1178  PEN_WIDTH_COMMAND   EQU  93
005C6512  =00000003               1179  PEN_WIDTH           EQU  3
005C6512                          1180  
005C6512  =00000050               1181  PEN_COLOR_COMMAND   EQU  80
005C6512  =00FFFFFF               1182  SEG_COLOR           EQU  $00FFFFFF
005C6512                          1183  
005C6512  =00000054               1184  DRAW_COMMAND        EQU  84   
005C6512                          1185  
005C6512                          1186  ;START   ORG $1000
005C6512                          1187  SevenSegDisplay
005C6512  23FC 00000000 005C6782  1188              move.l  #0,numOfDigits
005C651C  23FC 00000000 005C6786  1189              move.l  #0,counter
005C6526  2C39 005C6A00           1190              move.l  numberToDisplay,d6
005C652C  7000                    1191              move.l  #0,d0
005C652E  4EB9 005C65B8           1192              jsr     NumberOfDigits
005C6534  23F9 005C6A04 005C678A  1193              move.l  centerX,centerXWithOffset
005C653E                          1194  SegCheck
005C653E                          1195  
005C653E                          1196              * sets display offset depending on number of digits
005C653E  2039 005C6786           1197              move.l  counter,d0
005C6544  7212                    1198              move.l  #18,d1
005C6546  C0C1                    1199              mulu.w  d1,d0
005C6548  23C0 005C677E           1200              move.l  d0,digitDisplayOffset
005C654E                          1201              
005C654E  2039 005C6A04           1202              move.l  centerX,d0
005C6554  90B9 005C677E           1203              sub.l   digitDisplayOffset,d0
005C655A  23C0 005C678A           1204              move.l  d0,centerXWithOffset
005C6560                          1205              
005C6560                          1206              * only reads last digit of the number to display
005C6560  2039 005C6A00           1207              move.l  numberToDisplay,d0
005C6566  80FC 000A               1208              divu.w  #10,d0
005C656A  4840                    1209              swap    d0
005C656C  3A00                    1210              move.w  d0,d5
005C656E  E58D                    1211              lsl.l   #2,d5
005C6570                          1212              
005C6570  4EB9 005C6742           1213              jsr     ResetSegPosition
005C6576                          1214             
005C6576  41F9 005C679E           1215              lea     SevenSegBitmask,a0
005C657C  2C30 5000               1216              move.l  (a0,d5),d6     ; number from table stored in d1
005C6580                          1217              
005C6580  4EB9 005C676C           1218              jsr     SetPenSettings
005C6586  4EB9 005C65CE           1219              jsr     DisplaySegment ; go through display conditional statements
005C658C                          1220              
005C658C  4286                    1221              clr.l   d6
005C658E                          1222              
005C658E  2039 005C6A00           1223              move.l  numberToDisplay,d0
005C6594  80FC 000A               1224              divu.w   #10,d0
005C6598  3C00                    1225              move.w  d0,d6
005C659A  2006                    1226              move.l  d6,d0
005C659C  23C0 005C6A00           1227              move.l  d0,numberToDisplay
005C65A2                          1228              
005C65A2  52B9 005C6786           1229              add.l   #1,counter
005C65A8                          1230              
005C65A8  2039 005C6782           1231              move.l  numOfDigits,d0
005C65AE  B0B9 005C6786           1232              cmp.l  counter,d0
005C65B4  6E88                    1233              bgt     SegCheck
005C65B6                          1234              
005C65B6  4E75                    1235              rts
005C65B8                          1236              
005C65B8                          1237              ;SIMHALT
005C65B8                          1238              
005C65B8                          1239  NumberOfDigits
005C65B8                          1240              
005C65B8  52B9 005C6782           1241              add.l   #1,numOfDigits
005C65BE  8CFC 000A               1242              divu.w  #10,d6
005C65C2  3006                    1243              move.w  d6,d0
005C65C4  2C00                    1244              move.l  d0,d6
005C65C6                          1245              
005C65C6                          1246              * finding the number of digits of the inputted number
005C65C6  0C46 0000               1247              cmpi.w  #0,d6
005C65CA  6EEC                    1248              bgt     NumberOfDigits
005C65CC                          1249              
005C65CC                          1250  NumberOfDigitsEnd
005C65CC  4E75                    1251              rts            
005C65CE                          1252              
005C65CE                          1253              
005C65CE                          1254  DisplaySegment
005C65CE                          1255              ; display segment G
005C65CE  0806 0000               1256              btst.l  #00,d6
005C65D2  6700 001A               1257              beq     DisplaySegF
005C65D6                          1258              
005C65D6                          1259              * drawing segment based on center position
005C65D6  57B9 005C678E           1260              sub.l   #3,segX1
005C65DC  56B9 005C6796           1261              add.l   #3,segX2
005C65E2                          1262              
005C65E2  4EB9 005C6724           1263              jsr     DrawSegment
005C65E8  4EB9 005C6742           1264              jsr     ResetSegPosition
005C65EE                          1265                
005C65EE                          1266  DisplaySegF
005C65EE  E89E                    1267              ror.l   #4,d6
005C65F0  0806 0000               1268              btst.l  #00,d6
005C65F4  6700 002A               1269              beq     DisplaySegE
005C65F8                          1270              
005C65F8                          1271              * drawing segment based on center position
005C65F8  51B9 005C6792           1272              sub.l   #8,segY1
005C65FE  5DB9 005C678E           1273              sub.l   #6,segX1
005C6604                          1274              
005C6604  23F9 005C678E 005C6796  1275              move.l  segX1,segX2
005C660E  55B9 005C679A           1276              sub.l   #2,segY2
005C6614                          1277              
005C6614  4EB9 005C6724           1278              jsr     DrawSegment
005C661A  4EB9 005C6742           1279              jsr     ResetSegPosition
005C6620                          1280  
005C6620                          1281  DisplaySegE
005C6620  E89E                    1282              ror.l   #4,d6
005C6622  0806 0000               1283              btst.l  #00,d6
005C6626  6700 002A               1284              beq     DisplaySegD
005C662A                          1285              
005C662A                          1286              * drawing segment based on center position
005C662A  54B9 005C6792           1287              add.l   #2,segY1
005C6630  5DB9 005C678E           1288              sub.l   #6,segX1
005C6636                          1289              
005C6636  23F9 005C678E 005C6796  1290              move.l  segX1,segX2
005C6640  50B9 005C679A           1291              add.l   #8,segY2
005C6646                          1292              
005C6646  4EB9 005C6724           1293              jsr     DrawSegment
005C664C  4EB9 005C6742           1294              jsr     ResetSegPosition
005C6652                          1295  
005C6652                          1296  DisplaySegD
005C6652  E89E                    1297              ror.l   #4,d6
005C6654  0806 0000               1298              btst.l  #00,d6
005C6658  6700 002E               1299              beq     DisplaySegC
005C665C                          1300              
005C665C                          1301              * drawing segment based on center position
005C665C  57B9 005C678E           1302              sub.l   #3,segX1
005C6662  06B9 0000000A 005C6792  1303              add.l   #10,segY1
005C666C                          1304              
005C666C  56B9 005C6796           1305              add.l   #3,segX2
005C6672  23F9 005C6792 005C679A  1306              move.l  segY1,segY2
005C667C                          1307              
005C667C  4EB9 005C6724           1308              jsr     DrawSegment
005C6682  4EB9 005C6742           1309              jsr     ResetSegPosition
005C6688                          1310  
005C6688                          1311  DisplaySegC
005C6688  E89E                    1312              ror.l   #4,d6
005C668A  0806 0000               1313              btst.l  #00,d6
005C668E  6700 002A               1314              beq     DisplaySegB
005C6692                          1315              
005C6692                          1316              * drawing segment based on center position
005C6692  54B9 005C6792           1317              add.l   #2,segY1
005C6698  5CB9 005C678E           1318              add.l   #6,segX1
005C669E                          1319              
005C669E  23F9 005C678E 005C6796  1320              move.l  segX1,segX2
005C66A8  50B9 005C679A           1321              add.l   #8,segY2
005C66AE                          1322              
005C66AE  4EB9 005C6724           1323              jsr     DrawSegment
005C66B4  4EB9 005C6742           1324              jsr     ResetSegPosition
005C66BA                          1325  
005C66BA                          1326  DisplaySegB
005C66BA  E89E                    1327              ror.l   #4,d6
005C66BC  0806 0000               1328              btst.l  #00,d6
005C66C0  6700 002A               1329              beq     DisplaySegA
005C66C4                          1330              
005C66C4                          1331              * drawing segment based on center position
005C66C4  51B9 005C6792           1332              sub.l   #8,segY1
005C66CA  5CB9 005C678E           1333              add.l   #6,segX1
005C66D0                          1334              
005C66D0  23F9 005C678E 005C6796  1335              move.l  segX1,segX2
005C66DA  55B9 005C679A           1336              sub.l   #2,segY2
005C66E0                          1337              
005C66E0  4EB9 005C6724           1338              jsr     DrawSegment
005C66E6  4EB9 005C6742           1339              jsr     ResetSegPosition
005C66EC                          1340  
005C66EC                          1341                
005C66EC                          1342  DisplaySegA
005C66EC  E89E                    1343              ror.l   #4,d6
005C66EE  0806 0000               1344              btst.l  #00,d6
005C66F2  6700 002E               1345              beq     DisplaySegEnd
005C66F6                          1346              
005C66F6                          1347              * drawing segment based on center position
005C66F6  57B9 005C678E           1348              sub.l   #3,segX1
005C66FC  04B9 0000000A 005C6792  1349              sub.l   #10,segY1
005C6706                          1350              
005C6706  56B9 005C6796           1351              add.l   #3,segX2
005C670C  23F9 005C6792 005C679A  1352              move.l  segY1,segY2
005C6716                          1353              
005C6716  4EB9 005C6724           1354              jsr     DrawSegment
005C671C  4EB9 005C6742           1355              jsr     ResetSegPosition
005C6722                          1356  
005C6722                          1357  DisplaySegEnd
005C6722  4E75                    1358              rts
005C6724                          1359              
005C6724                          1360  DrawSegment
005C6724  7054                    1361              move.l  #DRAW_COMMAND,d0
005C6726  2239 005C678E           1362              move.l  segX1,d1
005C672C  2439 005C6792           1363              move.l  segY1,d2
005C6732  2639 005C6796           1364              move.l  segX2,d3
005C6738  2839 005C679A           1365              move.l  segY2,d4
005C673E  4E4F                    1366              trap    #15
005C6740  4E75                    1367              rts
005C6742                          1368              
005C6742                          1369  ResetSegPosition
005C6742  23F9 005C678A 005C678E  1370              move.l  centerXWithOffset,segX1
005C674C  23F9 005C678A 005C6796  1371              move.l  centerXWithOffset,segX2
005C6756  23F9 005C6A08 005C6792  1372              move.l  centerY,segY1
005C6760  23F9 005C6A08 005C679A  1373              move.l  centerY,segY2
005C676A  4E75                    1374              rts
005C676C                          1375  
005C676C                          1376  SetPenSettings
005C676C  705D                    1377              move.l  #PEN_WIDTH_COMMAND,d0
005C676E  7203                    1378              move.l  #PEN_WIDTH,d1
005C6770  4E4F                    1379              trap    #15
005C6772                          1380              
005C6772  7050                    1381              move.l  #PEN_COLOR_COMMAND,d0
005C6774  223C 00FFFFFF           1382              move.l  #SEG_COLOR,d1
005C677A  4E4F                    1383              trap    #15
005C677C  4E75                    1384              rts
005C677E                          1385              
005C677E                          1386  
005C677E= 00000000                1387  digitDisplayOffset  dc.l    0
005C6782= 00000000                1388  numOfDigits         dc.l    0
005C6786= 00000000                1389  counter             dc.l    0
005C678A                          1390  
005C678A                          1391  
005C678A= 005C6A04                1392  centerXWithOffset   dc.l    centerX
005C678E                          1393  
005C678E= 00000000                1394  segX1               dc.l    0
005C6792= 00000000                1395  segY1               dc.l    0
005C6796= 00000000                1396  segX2               dc.l    0
005C679A= 00000000                1397  segY2               dc.l    0
005C679E                          1398              
005C679E                          1399  SevenSegBitmask
005C679E= 01111110 00110000 ...   1400              dc.l    $01111110, $00110000, $01101101, $01111001, $00110011 
005C67B2= 01011011 01011111 ...   1401              dc.l    $01011011, $01011111, $01110000, $01111111, $01111011 
005C67C6                          1402    
005C67C6                          1403    ;END START
005C67C6                          1404  
005C67C6                          1405  
005C67C6                          1406  
005C67C6                          1407  
005C67C6                          1408  
005C67C6                          1409  -------------------- end include --------------------
005C67C6                          1410      INCLUDE             "InvalSubroutines.X68"
005C67C6                          1411  SevenSegInval
005C67C6  7050                    1412          move.l      #PEN_COLOR_COMMAND,d0
005C67C8  223C 0045251F           1413          move.l      #$0045251F,d1
005C67CE  4E4F                    1414          trap        #15
005C67D0                          1415          
005C67D0  7051                    1416          move.l      #FILL_COLOR_COMMAND,d0
005C67D2  4E4F                    1417          trap        #15
005C67D4                          1418          
005C67D4  4281                    1419          clr.l       d1
005C67D6                          1420  
005C67D6  7057                    1421          move.l      #DRAW_RECTANGLE,d0
005C67D8  724A                    1422          move.l      #74,d1
005C67DA  7426                    1423          move.l      #38,d2
005C67DC  263C 000000A8           1424          move.l      #168,d3
005C67E2  785B                    1425          move.l      #91,d4
005C67E4  4E4F                    1426          trap        #15
005C67E6                          1427          
005C67E6  223C 000001EC           1428          move.l      #492,d1
005C67EC  742D                    1429          move.l      #45,d2
005C67EE  263C 00000247           1430          move.l      #583,d3
005C67F4  7866                    1431          move.l      #102,d4
005C67F6  4E4F                    1432          trap        #15
005C67F8                          1433          
005C67F8  4E75                    1434          rts
005C67FA                          1435          
005C67FA                          1436  ObjInval
005C67FA  7050                    1437          move.l      #PEN_COLOR_COMMAND,d0
005C67FC  223C 009C6258           1438          move.l      #$009C6258,d1
005C6802  4E4F                    1439          trap        #15
005C6804                          1440          
005C6804  7051                    1441          move.l      #FILL_COLOR_COMMAND,d0
005C6806  4E4F                    1442          trap        #15
005C6808                          1443          
005C6808  4281                    1444          clr.l       d1
005C680A                          1445  
005C680A  7057                    1446          move.l      #DRAW_RECTANGLE,d0
005C680C  2239 005C69D4           1447          move.l      invalPosX,d1
005C6812  2439 005C69D8           1448          move.l      invalPosY,d2
005C6818  2639 005C69D4           1449          move.l      invalPosX,d3
005C681E  D6B9 005C69E0           1450          add.l       invalWidth,d3
005C6824  2839 005C69D8           1451          move.l      invalPosY,d4
005C682A  D8B9 005C69DC           1452          add.l       invalHeight,d4
005C6830  4E4F                    1453          trap        #15
005C6832  4E75                    1454          rts
005C6834                          1455          
005C6834                          1456  DisplayAllBins 
005C6834                          1457          * right bin
005C6834  2039 005C69C0           1458          move.l      rightBin,d0
005C683A  5380                    1459          sub.l       #1,d0
005C683C  E588                    1460          lsl.l       #2,d0
005C683E  4EB9 005C6878           1461          jsr         FindTypeOfBin
005C6844  4EB9 005C6918           1462          jsr         DisplayRight      
005C684A                          1463          
005C684A                          1464          * down bin
005C684A  2039 005C69C4           1465          move.l      downBin,d0
005C6850  5380                    1466          sub.l       #1,d0
005C6852  E588                    1467          lsl.l       #2,d0
005C6854  4EB9 005C6878           1468          jsr         FindTypeOfBin
005C685A  4EB9 005C6926           1469          jsr         Displaydown      
005C6860                          1470          
005C6860                          1471          *left bin
005C6860  2039 005C69BC           1472          move.l      leftBin,d0
005C6866  5380                    1473          sub.l       #1,d0
005C6868  E588                    1474          lsl.l       #2,d0
005C686A  4EB9 005C6878           1475          jsr         FindTypeOfBin
005C6870  4EB9 005C690E           1476          jsr         DisplayLeft 
005C6876                          1477          
005C6876  4E75                    1478          rts
005C6878                          1479          
005C6878                          1480  FindTypeOfBin
005C6878                          1481           * find and display type of bin
005C6878  41F9 005C6976           1482          lea         DisplayChosenBin,a0
005C687E  2230 0000               1483          move.l      (a0,d0),d1
005C6882  2241                    1484          move.l      d1,a1
005C6884  4E91                    1485          jsr         (a1) 
005C6886  4E75                    1486          rts    
005C6888                          1487          
005C6888                          1488  ChosenBinInval
005C6888  2039 005C69F4           1489          move.l      chosenBin,d0
005C688E  5380                    1490          sub.l       #1,d0 ; indexing purposes
005C6890  E588                    1491          lsl.l       #2,d0
005C6892                          1492          
005C6892                          1493          * find and display type of bin
005C6892  41F9 005C6976           1494          lea         DisplayChosenBin,a0
005C6898  2230 0000               1495          move.l      (a0,d0),d1
005C689C  2241                    1496          move.l      d1,a1
005C689E  4E91                    1497          jsr         (a1)
005C68A0                          1498          
005C68A0                          1499          * manipulate bin type number to branch to correct location display
005C68A0  E488                    1500          lsr.l       #2,d0
005C68A2  2F39 005C69BC           1501          move.l      leftBin,-(sp)
005C68A8  2F39 005C69C0           1502          move.l      rightBin,-(sp)
005C68AE  2F39 005C69C4           1503          move.l      downBin,-(sp)
005C68B4                          1504          
005C68B4  45F9 005C6972           1505          lea         downBinIndex,a2
005C68BA  2497                    1506          move.l      (sp),(a2)
005C68BC                          1507          
005C68BC  45F9 005C696E           1508          lea         rightBinIndex,a2   
005C68C2  24AF 0004               1509          move.l      4(sp),(a2)
005C68C6                          1510      
005C68C6  45F9 005C696A           1511          lea         leftBinIndex,a2   
005C68CC  24AF 0008               1512          move.l      8(sp),(a2)
005C68D0                          1513          
005C68D0  53B9 005C6972           1514          sub.l       #1,downBinIndex
005C68D6  53B9 005C696E           1515          sub.l       #1,rightBinIndex
005C68DC  53B9 005C696A           1516          sub.l       #1,leftBinIndex
005C68E2                          1517          
005C68E2  DFFC 0000000C           1518          add.l       #12,sp
005C68E8                          1519          
005C68E8                          1520          * display bin at specified location
005C68E8                          1521  
005C68E8  B0B9 005C696A           1522          cmp.l       leftBinIndex,d0
005C68EE  6700 001E               1523          beq         DisplayLeft
005C68F2                          1524          
005C68F2                          1525  
005C68F2  B0B9 005C696E           1526          cmp.l       rightBinIndex,d0
005C68F8  6700 001E               1527          beq         DisplayRight
005C68FC                          1528          
005C68FC                          1529  
005C68FC  B0B9 005C6972           1530          cmp.l       downBinIndex,d0
005C6902  6700 0022               1531          beq         DisplayDown
005C6906                          1532  
005C6906                          1533  ChosenBinInvalEnd        
005C6906  4EB9 005C62F2           1534          jsr        DisplayRandomObjEnd
005C690C  4E75                    1535          rts
005C690E                          1536          
005C690E                          1537  DisplayLeft
005C690E  720D                    1538          move.l      #13,d1
005C6910  243C 000000BE           1539          move.l      #190,d2
005C6916  60EE                    1540          bra         ChosenBinInvalEnd        
005C6918                          1541          
005C6918                          1542  DisplayRight
005C6918  223C 0000024C           1543          move.l      #588,d1
005C691E  243C 000000BE           1544          move.l      #190,d2
005C6924  60E0                    1545          bra         ChosenBinInvalEnd        
005C6926                          1546          
005C6926                          1547  DisplayDown
005C6926  223C 00000118           1548          move.l      #280,d1
005C692C  243C 00000172           1549          move.l      #370,d2
005C6932  60D2                    1550          bra         ChosenBinInvalEnd        
005C6934                          1551          
005C6934                          1552  DisplayRecycleBin
005C6934  263C 000002CC           1553          move.l       #716,d3
005C693A  283C 00000180           1554          move.l       #384,d4
005C6940  7A5A                    1555          move.l       #90,d5
005C6942  7C52                    1556          move.l       #82,d6
005C6944  4E75                    1557          rts
005C6946                          1558          
005C6946                          1559  DisplayTrashBin
005C6946  263C 00000399           1560          move.l       #921,d3
005C694C  283C 0000017F           1561          move.l       #383,d4
005C6952  7A5C                    1562          move.l       #92,d5
005C6954  7C5B                    1563          move.l       #91,d6
005C6956  4E75                    1564          rts
005C6958                          1565          
005C6958                          1566  DisplayKeepBin
005C6958  263C 0000033C           1567          move.l       #828,d3
005C695E  283C 00000182           1568          move.l       #386,d4
005C6964  7A5A                    1569          move.l       #90,d5
005C6966  7C52                    1570          move.l       #82,d6
005C6968  4E75                    1571          rts
005C696A                          1572  
005C696A= 00000000                1573  leftBinIndex    dc.l 0
005C696E= 00000000                1574  rightBinIndex   dc.l 0
005C6972= 00000000                1575  downBinIndex    dc.l 0
005C6976                          1576  
005C6976                          1577  DisplayChosenBin    
005C6976= 005C6934 005C6958 ...   1578          dc.l        DisplayRecycleBin, DisplayKeepBin, DisplayTrashBin
005C6982                          1579  
005C6982                          1580  
005C6982                          1581  
005C6982                          1582  
005C6982                          1583  
005C6982                          1584  
005C6982                          1585  
005C6982                          1586  
005C6982                          1587  
005C6982                          1588  
005C6982                          1589  
005C6982                          1590  
005C6982                          1591  
005C6982                          1592  
005C6982                          1593  
005C6982                          1594  
005C6982                          1595  -------------------- end include --------------------
005C6982                          1596      INCLUDE             "SoundManager.X68"
005C6982  =00000047               1597  LOAD_SOUND_IN_MEMORY             EQU     71
005C6982  =0000004C               1598  CONTROL_STANDARD_PLAYER          EQU     76
005C6982                          1599  
005C6982                          1600  SoundInitialize
005C6982  7047                    1601          move.l      #LOAD_SOUND_IN_MEMORY,d0
005C6984  43F9 005C699A           1602          lea         backgroundMusic,a1
005C698A  7200                    1603          move.l      #0,d1
005C698C  4E4F                    1604          trap        #15
005C698E  4E75                    1605          rts
005C6990                          1606          
005C6990                          1607  PlayBackgroundMusic
005C6990  704C                    1608          move.l      #CONTROL_STANDARD_PLAYER,d0
005C6992  7200                    1609          move.l      #0,d1       ; sound reference number
005C6994  7401                    1610          move.l      #1,d2       ; plays on loop
005C6996  4E4F                    1611          trap        #15     
005C6998  4E75                    1612          rts
005C699A                          1613  
005C699A                          1614  
005C699A= 43 6F 75 72 73 65 ...   1615  backgroundMusic     dc.b    'Coursebot.WAV',0
005C699A= 43 6F 75 72 73 65 ...   1616  -------------------- end include --------------------
005C69A8                          1617      
005C69A8= 00000001                1618  LastFrameKeyDown    dc.l    1
005C69AC                          1619  CurrentFrameKeyDown ds.l    1
005C69B0                          1620  LastFrameTime       ds.l    1
005C69B4                          1621  CurrentFrameTime    ds.l    1
005C69B8                          1622  deltaTime           ds.l    1
005C69BC                          1623  
005C69BC= 00000003                1624  leftBin             dc.l    3 ; number corresponds with the obj to sort (1: recycle, 2: Gold, 3: trash) 
005C69C0= 00000001                1625  rightBin            dc.l    1
005C69C4= 00000002                1626  downBin             dc.l    2
005C69C8                          1627  
005C69C8= 000000C8                1628  objDropCenterPos    dc.l    200
005C69CC                          1629  
005C69CC= 00000122                1630  randomObjPosX       dc.l    290
005C69D0= FFFFFFCE                1631  randomObjPosY       dc.l    -50  
005C69D4                          1632  
005C69D4= 00000118                1633  invalPosX           dc.l    280
005C69D8= FFFFFFCE                1634  invalPosY           dc.l    -50  
005C69DC                          1635  invalHeight         ds.l    1
005C69E0                          1636  invalWidth          ds.l    1
005C69E4                          1637  
005C69E4= 00000001                1638  velocity            dc.l    1
005C69E8= 00001770                1639  time                dc.l    6000
005C69EC                          1640  
005C69EC= 00000000                1641  binMixCounter       dc.l    0
005C69F0                          1642      
005C69F0= 01E0                    1643  screenHeight        dc.w    480
005C69F2= 02A8                    1644  screenWidth         dc.w    680
005C69F4= 00000000                1645  chosenBin           dc.l    0
005C69F8= 00000001                1646  sortedObj           dc.l    1
005C69FC= 00000000                1647  score               dc.l    0
005C6A00                          1648  
005C6A00                          1649  * 7 seg display ----------------
005C6A00= 00000000                1650  numberToDisplay     dc.l    0  
005C6A04= 00000000                1651  centerX             dc.l    0
005C6A08= 00000000                1652  centerY             dc.l    0
005C6A0C                          1653  * ------------------------------
005C6A0C                          1654  
005C6A0C= 00000001                1655  objDropped          dc.l    1
005C6A10= 00000001                1656  objIsMoving         dc.l    1
005C6A14                          1657  
005C6A14= 00000001                1658  randomObjToSort     dc.l    1
005C6A18= 00000001                1659  randomObjToSort2    dc.l    1
005C6A1C                          1660  
005C6A1C= 00000000                1661  pointsToAdd         dc.l    0
005C6A20                          1662  
005C6A20                          1663  
005C6A20  =0000000D               1664  CR                  EQU     $0D
005C6A20  =0000000A               1665  LF                  EQU     $0A
005C6A20                          1666  
005C6A20= 57 41 52 4E 49 4E ...   1667  warningString       dc.b    'WARNING:',CR,LF,0
005C6A2B= 57 4F 52 4B 45 52 ...   1668  workerString        dc.b    'WORKERS ARE SWITCHING ',CR,LF,0 
005C6A44= 54 48 45 20 53 4F ...   1669                      dc.b    'THE SORTING BINS',CR,LF,0
005C6A57                          1670                      
005C6A57                          1671  
005C6A57                          1672  
005C6A57                          1673  
005C6A57                          1674      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7F3F
BACKGROUNDMUSIC     5C699A
BACKGROUND_COLOR    DCA399
BINMIXCOUNTER       5C69EC
BINMOVEEND          1590
BMBITSPPIXEL        5C61F2
BMHEIGHT            5C61EE
BMPOSX              5C61E2
BMPOSXDRAW          5C61DA
BMPOSY              5C61E6
BMPOSYDRAW          5C61DE
BMSTART             5C61D6
BMWIDTH             5C61EA
BM_HEADER           1820
CALCDELTATIME       1334
CALCSCORE           13B2
CALCVELOCITY        1348
CALLFUNCTION        143A
CENTER              1486
CENTERINVAL         1120
CENTERX             5C6A04
CENTERXWITHOFFSET   5C678A
CENTERY             5C6A08
CHECKINPUT          1424
CHECKOBJSORTED      15F8
CHECK_FILE          169A
CHECK_FILE_ERROR    168C
CHOSENBIN           5C69F4
CHOSENBININVAL      5C6888
CHOSENBININVALEND   5C6906
CLEAR_SCREEN        B
CLEAR_SCREEN_COMMAND  B
CLEAR_SCREEN_MAGIC_VAL  FF00
COLOR_32BIT         173A
CONST_VELOCITY      C
CONTROL_STANDARD_PLAYER  4C
CORRECTBIN          1658
CORRECTGOLDBIN      1626
COUNTER             5C6786
CR                  D
CURRENTFRAMEKEYDOWN  5C69AC
CURRENTFRAMETIME    5C69B4
DATAFROMBMP         1876
DELTATIME           5C69B8
DIGITDISPLAYOFFSET  5C677E
DISPLAY             1710
DISPLAYALLBINS      5C6834
DISPLAYBACKGROUND   5C6472
DISPLAYCHOSENBIN    5C6976
DISPLAYCOUNTDOWNTIMER  13D4
DISPLAYDOWN         5C6926
DISPLAYENTERSCREEN  5C644A
DISPLAYGOLDOBJ      5C6378
DISPLAYKEEPBIN      5C6958
DISPLAYLEFT         5C690E
DISPLAYLOADINGSCREEN  5C63B0
DISPLAYRANDOMOBJ    5C62CE
DISPLAYRANDOMOBJEND  5C62F2
DISPLAYRECYCLEBIN   5C6934
DISPLAYRECYCLEOBJ   5C630A
DISPLAYRIGHT        5C6918
DISPLAYSCORE        1386
DISPLAYSEGA         5C66EC
DISPLAYSEGB         5C66BA
DISPLAYSEGC         5C6688
DISPLAYSEGD         5C6652
DISPLAYSEGE         5C6620
DISPLAYSEGEND       5C6722
DISPLAYSEGF         5C65EE
DISPLAYSEGMENT      5C65CE
DISPLAYTRASHBIN     5C6946
DISPLAYTRASHOBJ     5C6340
DISPLAY_SCORE       F
DISPLAY_STRING      5F
DOUBLE_BUFFERED_MODE  11
DOWNBIN             5C69C4
DOWNBININDEX        5C6972
DOWNBINMOVE         156C
DRAWING_MODE_COMMAND  5C
DRAWSEGMENT         5C6724
DRAW_COMMAND        54
DRAW_PIXEL_TRAP_CODE  52
DRAW_RECTANGLE      57
DRAW_ROW            1748
ENDIAN_CONVERSION   172E
END_OF_DATA         5C61BC
ENTER_GAMELOOP_INPUT  5
ERRORMESSAGE_WRONGSIGNATURE  5C61BC
FILE_SIGNATURE      424D
FILLBACKGROUND      135A
FILL_COLOR          51
FILL_COLOR_COMMAND  51
FINDDELTATIME       1310
FINDTYPEOFBIN       5C6878
FINISHGOLDCONDITION  1680
FINISHREGCONDITION  167E
FLOOD_FILL_COMMAND  59
FRACTIONAL_BITS     2
FUNCTIONTABLE       15A8
GAMELOOP            1090
GAMELOOPINITIALIZE  1066
GAMEOVER            122A
GETRANDOMBYTEINTOD6  5C6228
GETTIME             1328
GET_KEY_INPUT_COMMAND  13
GET_SCREEN_SIZE     21
GET_TIME_COMMAND    8
GOLDCONDITION       1616
GOLD_OBJ            2
HAVE_HAD_NO_INPUT   15A2
HEADER_BITSPPIXEL   1C
HEADER_HEIGHT_OFFSET  16
HEADER_STARTING_ADDRESS_OFFSET  A
HEADER_WIDTH_OFFSET  12
INITDATA            141E
INITIALIZE          16AA
INPUT               1134
INPUTOBJMOVEMENT    11A0
INVALHEIGHT         5C69DC
INVALPOSX           5C69D4
INVALPOSY           5C69D8
INVALWIDTH          5C69E0
KEY_DOWN_INPUT      53
KEY_LEFT_INPUT      41
KEY_RIGHT_INPUT     44
LASTFRAMEKEYDOWN    5C69A8
LASTFRAMETIME       5C69B0
LEFTBIN             5C69BC
LEFTBININDEX        5C696A
LEFTBINMOVE         1524
LF                  A
LOAD_SOUND_IN_MEMORY  47
MAININITIALIZE      1000
MOVE_OBJECT_POSITION  56
MOVE_TO_NEXT_DRAW_POS  176A
NEXT_ROW            177E
NINC0               5C6236
NINC1               5C623E
NOFUNCPTR           1478
NOINPUT             147A
NUMBEROFDIGITS      5C65B8
NUMBEROFDIGITSEND   5C65CC
NUMBERTODISPLAY     5C6A00
NUMOFDIGITS         5C6782
OBJDROPCENTERPOS    5C69C8
OBJDROPCOMPLETE     1182
OBJDROPPED          5C6A0C
OBJECTPOSX          15A4
OBJECTPOSY          15A6
OBJINVAL            5C67FA
OBJISMOVING         5C6A10
OBJMOVEMENT         14FE
PADDINGBYTES        5C61F4
PAUSETIMER          1254
PEN_COLOR           50
PEN_COLOR_COMMAND   50
PEN_COLOR_TRAP_CODE  50
PEN_WIDTH           3
PEN_WIDTH_COMMAND   5D
PLAYBACKGROUNDMUSIC  5C6990
POINTSTOADD         5C6A1C
PRINT_STRING        5F
PRINT_STRING_CR_LF  D
RANDOMBINGENERATOR  5C626A
RANDOMOBJDROP       1372
RANDOMOBJGENERATOR  5C6250
RANDOMOBJPOSX       5C69CC
RANDOMOBJPOSY       5C69D0
RANDOMOBJTOSORT     5C6A14
RANDOMOBJTOSORT2    5C6A18
RANDOMVAL           5C62CA
REGULARCONDITION    164E
RENDER              11EC
REPAINT_SCREEN_COMMAND  5E
RESETSEGPOSITION    5C6742
RESTARTSCREEN       14B4
RIGHTBIN            5C69C0
RIGHTBININDEX       5C696E
RIGHTBINMOVE        1548
SCORE               5C69FC
SCREENHEIGHT        5C69F0
SCREENWIDTH         5C69F2
SEEDRANDOMNUMBER    5C6210
SEGCHECK            5C653E
SEGX1               5C678E
SEGX2               5C6796
SEGY1               5C6792
SEGY2               5C679A
SEG_COLOR           FFFFFF
SELECTIONCOLOROFFSET  5C620C
SELECTIONHEIGHT     5C6204
SELECTIONPOSX       5C61F8
SELECTIONPOSY       5C61FC
SELECTIONSTARTOFFSET  5C6208
SELECTIONWIDTH      5C6200
SETPENSETTINGS      5C676C
SETSCREENRESOLUTION  1700
SET_OUTPUT_RESOLUTION_TRAP_CODE  21
SET_SELECTION       17B2
SEVENSEGBITMASK     5C679E
SEVENSEGDISPLAY     5C6512
SEVENSEGINVAL       5C67C6
SORTDOWN            14EA
SORTEDOBJ           5C69F8
SORTLEFT            14C2
SORTRIGHT           14D6
SOUNDINITIALIZE     5C6982
START               1000
START_OF_DATA       1876
SWAPBUFFERS         1412
TIME                5C69E8
TRANSPARENT_COLOR   FF65
UPDATE              1164
VARIABLES           5C62CA
VELOCITY            5C69E4
WAITFORENTER        1046
WARNINGSTRING       5C6A20
WORKERSTRING        5C6A2B
WRONGBIN            1666
WRONGGOLDBIN        1632
ZEROCONDITION       5C629C
