00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/7/2024 4:44:59 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Trash Sort
00000000                             3  * Written by : Haley Park
00000000                             4  * Date       :
00000000                             5  * Description: A game where the player must sort as much recycling and trash before the time runs out
00000000                             6  *-----------------------------------------------------------
00000000  =0000000F                  7  DISPLAY_SCORE           EQU     15
00000000  =0000005F                  8  PRINT_STRING            EQU     95
00000000  =00000011                  9  DOUBLE_BUFFERED_MODE    EQU     17
00000000  =0000005E                 10  REPAINT_SCREEN_COMMAND  equ     94
00000000  =0000000B                 11  CLEAR_SCREEN_COMMAND    equ     11
00000000  =0000FF00                 12  CLEAR_SCREEN_MAGIC_VAL  equ     $FF00
00000000  =0000005C                 13  DRAWING_MODE_COMMAND    equ     92
00000000                            14  
00000000  =0000005F                 15  DISPLAY_STRING          EQU     95
00000000                            16  
00000000  =00000005                 17  ENTER_GAMELOOP_INPUT    EQU     5
00000000                            18  
00000000  =00000050                 19  PEN_COLOR_COMMAND       EQU     80
00000000  =00000051                 20  FILL_COLOR_COMMAND      EQU     81
00000000  =009C6258                 21  BACKGROUND_COLOR        EQU     $009C6258
00000000  =00000059                 22  FLOOD_FILL_COMMAND      EQU     89
00000000  =00000057                 23  DRAW_RECTANGLE          EQU     87
00000000                            24  
00000000  =00000008                 25  GET_TIME_COMMAND        EQU     8
00000000                            26  
00000000  =00000001                 27  RECYCLE_BIN             EQU     1    
00000000  =00000003                 28  TRASH_BIN               EQU     3  
00000000  =00000002                 29  KEEP_BIN                EQU     2 
00000000                            30  
00001000                            31      ORG    $1000
00001000                            32  START:                  ; first instruction of program
00001000                            33  **********************************************************************
00001000                            34  * Initialization
00001000                            35  **********************************************************************
00001000                            36  MainInitialize
00001000                            37          
00001000  23FC 00000000 002E3D50    38          move.l      #0,randomObjPosY
0000100A  23FC 0000012C 002E3D4C    39          move.l      #300,randomObjPosX
00001014  23FC 00000000 002E3D6C    40          move.l      #0,score
0000101E  4EB9 00001582             41          jsr         setScreenResolution  
00001024                            42          
00001024  4EB9 00001266             43          jsr         FillBackground
0000102A                            44          
0000102A  4EB9 000011D0             45          jsr         DisplayEnterScreen
00001030                            46          ;jsr         GetTime
00001030                            47          
00001030                            48          *set double buffered mode                   
00001030  103C 005C                 49          move.b      #DRAWING_MODE_COMMAND,d0
00001034  123C 0011                 50          move.b      #DOUBLE_BUFFERED_MODE,d1
00001038  4E4F                      51          trap        #15     
0000103A                            52          
0000103A                            53  WaitForEnter
0000103A  4EB9 00001354             54          jsr         RestartScreen
00001040  4EB9 00001266             55          jsr         FillBackground
00001046  4EB9 000011A8             56          jsr         DisplayLoadingScreen
0000104C  7005                      57          move.l      #ENTER_GAMELOOP_INPUT,d0
0000104E  4E4F                      58          trap        #15
00001050                            59          
00001050  0C01 000D                 60          cmpi.b      #$0D,d1
00001054  6700 0004                 61          beq         GameLoopInitialize
00001058                            62          
00001058  60E0                      63          bra         WaitForEnter
0000105A                            64          
0000105A                            65  GameLoopInitialize
0000105A                            66           ;jsr         DisplayBackground 
0000105A  4EB9 000012C4             67           jsr         SwapBuffers  
00001060                            68          
00001060                            69  **********************************************************************
00001060                            70  * GameLoop
00001060                            71  **********************************************************************   
00001060                            72  GameLoop     
00001060                            73          ;jsr         FindTimeBasedMovement
00001060                            74  
00001060  4EB9 00001112             75           jsr        Update
00001066                            76  *--------------------------------------------------        
00001066                            77  *        *drop random object in place
00001066  0CB9 000000A0 002E3D50    78          cmpi.l      #160,randomObjPosY
00001070  6E00 000A                 79          bgt         ObjDropEnd
00001074                            80          
00001074  4EB9 0000127E             81          jsr         RandomObjDrop
0000107A  60E4                      82          bra         GameLoop
0000107C                            83          
0000107C                            84  ObjDropEnd
0000107C                            85          * input subroutines
0000107C  4EB9 000012D0             86          jsr         InitData
00001082                            87  
00001082  4EB9 000012D6             88          jsr         CheckInput
00001088                            89     
00001088                            90  *-------------------------------------------------------------------- 
00001088                            91          * set curr frame key press to true
00001088  23FC 00000000 002E3D3C    92          move.l      #0,currentFrameKeyDown
00001092                            93          
00001092                            94          * if there is no input, set current frame key press to false
00001092  0C87 00000000             95          cmpi.l      #0,d7
00001098  6600 0062                 96          bne         EndGameLoop
0000109C  23FC 00000001 002E3D3C    97          move.l      #1,currentFrameKeyDown
000010A6                            98          
000010A6                            99  *--------------------------------------------------------------------
000010A6                           100          * compare last frame and curr frame to see if the key is held down
000010A6  2039 002E3D38            101          move.l  lastFrameKeyDown,d0
000010AC  D0B9 002E3D3C            102          add.l   currentFrameKeyDown,d0
000010B2  0C80 00000002            103          cmpi.l  #2,d0
000010B8  6700 0042                104          beq     EndGameLoop
000010BC                           105          
000010BC                           106          * Occurs every key up
000010BC                           107  * -------------------------------------------------------------------
000010BC                           108  ObjInputMove       
000010BC  4EB9 0000139E            109          jsr     ObjMovement
000010C2  7001                     110          move.l  #1,d0
000010C4  4EB9 00001112            111          jsr     Update
000010CA  60F0                     112          bra     ObjInputMove
000010CC                           113          
000010CC                           114  ObjInputMoveEnd
000010CC  588F                     115          add.l   #4,sp
000010CE                           116   *----------------------------------------------------------------------
000010CE  4EB9 00001486            117          jsr     CheckObjSorted
000010D4  4EB9 002E3C52            118          jsr     RandomObjGenerator
000010DA  47F9 002E3D70            119          lea     randomObjToSort,a3
000010E0  2687                     120          move.l  d7,(a3)
000010E2                           121          
000010E2                           122          * reset obj pos Y&X
000010E2  23FC 00000118 002E3D4C   123          move.l      #280,randomObjPosX
000010EC  23FC 00000000 002E3D50   124          move.l      #0,randomObjPosY
000010F6  4EB9 000012B2            125          jsr         CalcScore
000010FC                           126          
000010FC                           127          
000010FC                           128  EndGameLoop         
000010FC                           129          
000010FC                           130          * record curr frame value for comparison in next frame
000010FC  45F9 002E3D38            131          lea         LastFrameKeyDown,a2
00001102  24B9 002E3D3C            132          move.l      currentFrameKeyDown,(a2)
00001108                           133          
00001108  4EB9 000012C4            134          jsr         SwapBuffers
0000110E                           135  
0000110E  6000 FF50                136          bra         GameLoop
00001112                           137  
00001112                           138  
00001112                           139  **********************************************************************
00001112                           140  * Subroutines
00001112                           141  **********************************************************************
00001112                           142  Update      
00001112  4EB9 00001354            143          jsr         RestartScreen
00001118                           144          
00001118  4EB9 00001266            145          jsr         FillBackground
0000111E                           146  
0000111E  4EB9 00001138            147          jsr         DisplayBinLabels
00001124                           148          
00001124  4EB9 000012A2            149          jsr         DisplayScore
0000112A                           150          
0000112A  4EB9 002E3C70            151          jsr         DisplayRandomObj
00001130                           152          
00001130  4EB9 000012C4            153          jsr         SwapBuffers
00001136                           154          
00001136                           155          ;jsr         ObjInval
00001136                           156           
00001136  4E75                     157          rts
00001138                           158          
00001138                           159  DisplayBinLabels
00001138                           160  *recycle bin label
00001138  705F                     161          move.l      #DISPLAY_STRING,d0
0000113A  323C 000A                162          move.w      #10,d1
0000113E  343C 008C                163          move.w      #140,d2
00001142  43F9 002E3D7A            164          lea         recycleString,a1
00001148  4E4F                     165          trap        #15
0000114A                           166          
0000114A                           167  *trash bin label
0000114A  705F                     168          move.l      #DISPLAY_STRING,d0
0000114C  323C 024E                169          move.w      #590,d1
00001150  343C 008C                170          move.w      #140,d2
00001154  43F9 002E3D88            171          lea         trashString,a1
0000115A  4E4F                     172          trap        #15
0000115C                           173          
0000115C                           174  *keep bin label
0000115C  705F                     175          move.l      #DISPLAY_STRING,d0
0000115E  323C 013B                176          move.w      #315,d1
00001162  343C 01C2                177          move.w      #450,d2
00001166  43F9 002E3D94            178          lea         keepString,a1
0000116C  4E4F                     179          trap        #15
0000116E                           180          
0000116E  4E75                     181          rts
00001170                           182          
00001170                           183          
00001170                           184  ObjInval
00001170  7050                     185          move.l      #PEN_COLOR_COMMAND,d0
00001172  223C 009C6258            186          move.l      #$009C6258,d1
00001178  4E4F                     187          trap        #15
0000117A                           188          
0000117A  7051                     189          move.l      #FILL_COLOR_COMMAND,d0
0000117C  4E4F                     190          trap        #15
0000117E                           191  
0000117E  7057                     192          move.l      #DRAW_RECTANGLE,d0
00001180  3239 002E3D4C            193          move.w      randomObjPosX,d1
00001186  3439 002E3D50            194          move.w      randomObjPosY,d2
0000118C  D479 002E3D54            195          add.w       randomObjHeight,d2
00001192  3639 002E3D4C            196          move.w      randomObjPosX,d3
00001198  D679 002E3D58            197          add.w       randomObjWidth,d3
0000119E  3839 002E3D54            198          move.w      randomObjHeight,d4
000011A4  4E4F                     199          trap        #15
000011A6  4E75                     200          rts
000011A8                           201          
000011A8                           202          
000011A8                           203  DisplayLoadingScreen
000011A8  223C 000000C8            204          move.l      #200,d1 ; Screen Position X
000011AE  243C 000000D7            205          move.l      #215,d2 ; Screen  Position Y
000011B4  263C 00000276            206          move.l      #630,d3 ; Selection Position X
000011BA  283C 00000224            207          move.l      #548,d4 ; Selection Position Y
000011C0  7A41                     208          move.l      #65,d5 ;HEIGHT
000011C2  2C3C 00000113            209          move.l      #275,d6 ;WIDTH
000011C8  4EB9 002E3C94            210          jsr         DisplayRandomObjEnd
000011CE  4E75                     211          rts        
000011D0                           212  DisplayEnterScreen
000011D0  223C 0000009B            213          move.l      #155,d1 ; Screen Position X
000011D6  243C 0000009B            214          move.l      #155,d2 ; Screen  Position Y
000011DC  7612                     215          move.l      #18,d3 ; Selection Position X
000011DE  283C 000001E3            216          move.l      #483,d4 ; Selection Position Y
000011E4  2A3C 000000B4            217          move.l      #180,d5 ;HEIGHT
000011EA  2C3C 00000176            218          move.l      #374,d6 ;WIDTH
000011F0  4EB9 002E3C94            219          jsr         DisplayRandomObjEnd
000011F6  4E75                     220          rts
000011F8                           221          
000011F8                           222  DisplayBackground
000011F8  7200                     223          move.l      #0,d1 ; Screen Position X
000011FA  7400                     224          move.l      #0,d2 ; Screen  Position Y
000011FC  7600                     225          move.l      #0,d3 ; Selection Position X
000011FE  7800                     226          move.l      #0,d4 ; Selection Position Y
00001200  2A3C 000001E0            227          move.l      #480,d5 ;HEIGHT
00001206  2C3C 000002A8            228          move.l      #680,d6 ;WIDTH
0000120C  4EB9 002E3C94            229          jsr         DisplayRandomObjEnd
00001212  4E75                     230          rts        
00001214                           231   
00001214                           232  FindTimeBasedMovement
00001214  23F9 002E3D44 002E3D40   233          move.l      currentFrameTime,lastFrameTime
0000121E  4EB9 00001232            234          jsr         GetTime
00001224  4EB9 0000123E            235          jsr         CalcDeltaTime
0000122A  4EB9 00001252            236          jsr         CalcVelocity 
00001230  4E75                     237          rts
00001232                           238          
00001232                           239  GetTime
00001232  7008                     240          move.l      #GET_TIME_COMMAND,d0
00001234  4E4F                     241          trap        #15
00001236                           242          
00001236  23C1 002E3D44            243          move.l      d1,currentFrameTime
0000123C  4E75                     244          rts
0000123E                           245          
0000123E                           246  CalcDeltaTime
0000123E  2039 002E3D44            247          move.l       currentFrameTime,d0
00001244  90B9 002E3D40            248          sub.l        lastFrameTime,d0
0000124A  33C0 002E3D48            249          move.w       d0,deltaTime
00001250  4E75                     250          rts
00001252                           251  
00001252                           252  * calc for time-based movement       
00001252                           253  CalcVelocity
00001252  2039 002E3D5C            254          move.l      velocity,d0
00001258  C0F9 002E3D48            255          mulu.w      deltaTime,d0
0000125E  23C0 002E3D5C            256          move.l      d0,velocity
00001264  4E75                     257          rts
00001266                           258          
00001266                           259  FillBackground
00001266  7051                     260          move.l      #FILL_COLOR_COMMAND,d0
00001268  223C 009C6258            261          move.l      #BACKGROUND_COLOR,d1
0000126E  4E4F                     262          trap        #15
00001270                           263          
00001270  7059                     264          move.l      #FLOOD_FILL_COMMAND,d0
00001272  323C 0000                265          move.w      #0,d1
00001276  343C 0000                266          move.w      #0,d2
0000127A  4E4F                     267          trap        #15
0000127C  4E75                     268          rts
0000127E                           269  
0000127E                           270  RandomObjDrop
0000127E                           271          * change in position
0000127E                           272          
0000127E  2039 002E3D50            273          move.l      randomObjPosY,d0
00001284  D0B9 002E3D5C            274          add.l       velocity,d0
0000128A  23C0 002E3D50            275          move.l      d0,randomObjPosY
00001290                           276         
00001290                           277  *        move.l      randomObjPosY,d0
00001290                           278          
00001290                           279          * velocity * position
00001290                           280  *        move.l      velocity,d1
00001290                           281  *        mulu.w      d1,d0
00001290                           282  *        move.l      d0,randomObjPosY
00001290                           283          
00001290                           284          
00001290                           285  *        jsr         DisplayRandomObj  
00001290                           286  *        jsr         SwapBuffers
00001290  4E75                     287          rts
00001292                           288          
00001292                           289          
00001292                           290       
00001292                           291  * Testing Purposes      
00001292                           292  DisplayRandomNum
00001292                           293          * returns random value through d7
00001292  700F                     294          move.l      #DISPLAY_SCORE,d0
00001294  2239 002E3D70            295          move.l      randomObjToSort,d1
0000129A  143C 000A                296          move.b      #10,d2
0000129E  4E4F                     297          trap        #15   
000012A0  4E75                     298          rts
000012A2                           299          
000012A2                           300          
000012A2                           301  DisplayScore
000012A2                           302          
000012A2  700F                     303          move.l      #DISPLAY_SCORE,d0
000012A4  2239 002E3D6C            304          move.l      score,d1
000012AA  143C 000A                305          move.b      #10,d2
000012AE  4E4F                     306          trap        #15   
000012B0  4E75                     307          rts   
000012B2                           308          
000012B2                           309  CalcScore
000012B2                           310          * adding to score
000012B2  7000                     311          move.l      #0,d0
000012B4  45F9 002E3D6C            312          lea         score,a2
000012BA  D0B9 002E3D74            313          add.l       pointsToAdd,d0
000012C0  D192                     314          add.l       d0,(a2)
000012C2  4E75                     315          rts
000012C4                           316          
000012C4                           317  SwapBuffers
000012C4  103C 005E                318          move.b  #REPAINT_SCREEN_COMMAND,d0
000012C8  4E4F                     319          trap    #15
000012CA  4E75                     320          rts             
000012CC                           321          
000012CC  FFFF FFFF                322      SIMHALT             ; halt simulator        
000012D0                           323  * Put program code here
000012D0                           324  
000012D0                           325  
000012D0                           326      INCLUDE             "Movement.X68"
000012D0                           327  
000012D0                           328  ALL_REG                 REG     D0-D5/A0-A6
000012D0  =00000041                329  KEY_LEFT_INPUT          equ     $41
000012D0  =00000044                330  KEY_RIGHT_INPUT         EQU     $44
000012D0  =00000053                331  KEY_DOWN_INPUT          EQU     $53
000012D0  =00000013                332  GET_KEY_INPUT_COMMAND   EQU     19
000012D0  =0000000B                333  CLEAR_SCREEN            EQU     11
000012D0  =0000FF00                334  CLEAR_SCREEN_MAGIC_VAL  EQU     $FF00
000012D0  =00000057                335  DRAW_RECTANGLE          EQU     87
000012D0  =00000021                336  GET_SCREEN_SIZE         EQU     33
000012D0  =00000051                337  FILL_COLOR              EQU     81
000012D0  =00000050                338  PEN_COLOR               EQU     80
000012D0  =00000056                339  MOVE_OBJECT_POSITION    EQU     86 
000012D0                           340  
000012D0                           341  InitData
000012D0  4287                     342          clr.l   d7
000012D2  7441                     343          move.l  #$41,d2
000012D4  4E75                     344          rts
000012D6                           345  CheckInput  
000012D6  103C 0013                346          move.b  #GET_KEY_INPUT_COMMAND,d0
000012DA  2202                     347          move.l  d2,d1
000012DC  4E4F                     348          TRAP    #15
000012DE  0C01 0000                349          cmpi.b  #0,d1
000012E2  6700 0036                350          beq     noInput
000012E6                           351  
000012E6  4EB9 000012EC            352          jsr     callFunction
000012EC                           353  
000012EC                           354  CallFunction
000012EC  7E01                     355          move.l  #1,d7
000012EE  48E7 FCFE                356          movem.l ALL_REG,-(sp)
000012F2  41F9 00001436            357          lea     FunctionTable,a0
000012F8  0482 00000041            358          sub.l   #$41,d2
000012FE  E58A                     359          lsl.l   #2,d2
00001300  2230 2000                360          move.l  (a0,d2),d1
00001304  0C81 00000000            361          cmpi.l  #0,d1
0000130A  6700 000C                362          beq     noFuncPtr
0000130E  2241                     363          move.l  d1,a1
00001310  4E91                     364          jsr     (a1)  
00001312  4CDF 7F3F                365          movem.l (sp)+,ALL_REG
00001316  588F                     366          add.l   #4,sp
00001318                           367          
00001318                           368  NoFuncPtr
00001318  4E75                     369          rts
0000131A                           370  
0000131A                           371  NoInput
0000131A                           372          *bump to next ascii value
0000131A  5282                     373          add.l    #1,d2
0000131C  0C02 0054                374          cmpi.b   #$54,d2
00001320  66B4                     375          bne      CheckInput
00001322  4EF8 12D0                376          jmp      InitData
00001326                           377  
00001326                           378  
00001326                           379  Center
00001326                           380         *high 16 bits = width
00001326                           381         *low 16 bits = height
00001326                           382         *divide by 2 to get center
00001326                           383         
00001326  7021                     384         move.l   #GET_SCREEN_SIZE,d0
00001328  323C 0000                385         move.w   #0,d1
0000132C  4E4F                     386         trap     #15
0000132E                           387         
0000132E  33C1 002E3D60            388         move.w   d1,screenHeight
00001334  3A01                     389         move.w   d1,d5
00001336                           390         
00001336  45F9 00001434            391         lea      objectPosY,a2
0000133C  E24D                     392         lsr.w    #1,d5
0000133E  3485                     393         move.w   d5,(a2)
00001340                           394         
00001340  4841                     395         swap     d1
00001342                           396         
00001342  33C1 002E3D62            397         move.w   d1,screenWidth
00001348  45F9 00001432            398         lea      objectPosX,a2
0000134E  E249                     399         lsr.w    #1,d1
00001350  3481                     400         move.w   d1,(a2)
00001352                           401         
00001352  4E75                     402         rts
00001354                           403          
00001354                           404  RestartScreen
00001354                           405    * Clears screen and resets drawing point at the center
00001354  700B                     406          move.l   #CLEAR_SCREEN,d0
00001356  323C FF00                407          move.w   #CLEAR_SCREEN_MAGIC_VAL,d1
0000135A  4E4F                     408          trap     #15
0000135C  4EB8 1326                409          jsr      center
00001360                           410          
00001360  4E75                     411          rts
00001362                           412  
00001362                           413  
00001362                           414  SortLeftRecycle
00001362                           415    * if A is pressed, update graphics and indicate which bin the object was sorted into
00001362  48E7 FCFE                416          movem.l ALL_REG,-(sp)
00001366                           417          
00001366  23FC 00000001 002E3D64   418          move.l  #RECYCLE_BIN,chosenBin  
00001370  4CDF 7F3F                419          movem.l (sp)+,ALL_REG
00001374  4E75                     420          rts
00001376                           421  
00001376                           422  SortRightTrash
00001376  48E7 FCFE                423          movem.l ALL_REG,-(sp) 
0000137A                           424          
0000137A  23FC 00000003 002E3D64   425          move.l  #TRASH_BIN,chosenBin
00001384  4CDF 7F3F                426          movem.l (sp)+,ALL_REG
00001388  4E75                     427          rts
0000138A                           428  
0000138A                           429  SortDownKeep
0000138A  48E7 FCFE                430          movem.l ALL_REG,-(sp)   
0000138E                           431  
0000138E  23FC 00000002 002E3D64   432          move.l  #KEEP_BIN,chosenBin
00001398  4CDF 7F3F                433          movem.l (sp)+,ALL_REG
0000139C  4E75                     434          rts
0000139E                           435          
0000139E                           436          
0000139E                           437  ObjMovement
0000139E  2039 002E3D64            438          move.l      chosenBin,d0
000013A4  B0BC 00000001            439          cmp.l       #RECYCLE_BIN,d0
000013AA  6700 0018                440          beq         RecycleBinMove
000013AE                           441          
000013AE  B0BC 00000003            442          cmp.l       #TRASH_BIN,d0
000013B4  6700 0032                443          beq         TrashBinMove
000013B8                           444          
000013B8  B0BC 00000002            445          cmp.l       #KEEP_BIN,d0
000013BE  6700 004C                446          beq         KeepBinMove
000013C2                           447          
000013C2  4E75                     448          rts
000013C4                           449  
000013C4                           450  RecycleBinMove
000013C4                           451          *check boundary
000013C4  2039 002E3D4C            452          move.l      RandomObjPosX,d0
000013CA  0C80 FFFFFFCE            453          cmpi.l      #-50,d0
000013D0  6D00 FCFA                454          blt         ObjInputMoveEnd
000013D4                           455          
000013D4  2039 002E3D4C            456          move.l      randomObjPosX,d0
000013DA  90B9 002E3D5C            457          sub.l       velocity,d0
000013E0  23C0 002E3D4C            458          move.l      d0,randomObjPosX
000013E6  4E75                     459          rts
000013E8                           460          
000013E8                           461  TrashBinMove
000013E8                           462    *check boundary
000013E8  2039 002E3D4C            463          move.l      RandomObjPosX,d0    
000013EE  0C80 00000258            464          cmpi.l      #600,d0
000013F4  6E00 FCD6                465          bgt         ObjInputMoveEnd
000013F8                           466          
000013F8  2039 002E3D4C            467          move.l      randomObjPosX,d0
000013FE  D0B9 002E3D5C            468          add.l       velocity,d0
00001404  23C0 002E3D4C            469          move.l      d0,randomObjPosX
0000140A  4E75                     470          rts   
0000140C                           471  
0000140C                           472  KeepBinMove
0000140C                           473            *check boundary
0000140C  2039 002E3D50            474          move.l      RandomObjPosY,d0
00001412  0C80 000001F4            475          cmpi.l      #500,d0
00001418  6E00 FCB2                476          bgt         ObjInputMoveEnd
0000141C                           477          
0000141C  2039 002E3D50            478          move.l      randomObjPosY,d0
00001422  D0B9 002E3D5C            479          add.l       velocity,d0
00001428  23C0 002E3D50            480          move.l      d0,randomObjPosY
0000142E  4E75                     481          rts     
00001430                           482  
00001430                           483  
00001430                           484  
00001430                           485  HAVE_HAD_NO_INPUT  ds.b    1
00001431                           486  
00001432                           487  objectPosX         ds.w    1
00001434                           488  objectPosY         ds.w    1
00001436                           489  functionTable   
00001436                           490                  *0-9
00001436= 00001362 00000000 ...    491                  dc.l    SortLeftRecycle,0,0,SortRightTrash,0,0,0
00001452= 00000000 00000000 ...    492                  dc.l    0,0,0,0,0,0,0
0000146E= 00000000 00000000 ...    493                  dc.l    0,0,0,0,SortDownKeep,0
00001486                           494  
00001486                           495  
00001486                           496  
00001486                           497  
00001486                           498  
00001486                           499  
00001486                           500  
00001486                           501  
00001486                           502  
00001486                           503  
00001486                           504  
00001486                           505  
00001486                           506  
00001486                           507  
00001486                           508  
00001486                           509  
00001486                           510  
00001486                           511  
00001486                           512  
00001486                           513  
00001486                           514  
00001486                           515  
00001486                           516  
00001486                           517  
00001486                           518  -------------------- end include --------------------
00001486                           519      INCLUDE             "CheckObjectType.X68"
00001486  =00000002                520  GOLD_OBJ            EQU  2
00001486                           521   
00001486                           522  
00001486                           523  
00001486                           524  
00001486                           525  CheckObjSorted
00001486  47F9 002E3D74            526      lea     pointsToAdd,a3
0000148C  26BC 00000000            527      move.l  #0,(a3)
00001492  2039 002E3D70            528      move.l  randomObjToSort,d0
00001498  B0BC 00000002            529      cmp.l   #GOLD_OBJ,d0
0000149E  6700 0006                530      beq     GoldCondition
000014A2                           531      
000014A2  6000 0038                532      bra     RegularCondition
000014A6                           533  
000014A6                           534  GoldCondition
000014A6  2039 002E3D64            535      move.l  chosenBin,d0
000014AC  B0B9 002E3D70            536      cmp.l   randomObjToSort,d0
000014B2  6600 000E                537      bne     WrongGoldBin
000014B6                           538      
000014B6                           539  CorrectGoldBin
000014B6  06B9 0000001E 002E3D74   540      add.l   #30,pointsToAdd
000014C0  4E75                     541      rts
000014C2                           542  
000014C2                           543  WrongGoldBin
000014C2  0CB9 00000000 002E3D6C   544      cmpi.l  #0,score
000014CC  6700 003E                545      beq     FinishRegCondition
000014D0                           546      
000014D0  04B9 0000001E 002E3D6C   547      sub.l   #30,score
000014DA  4E75                     548      rts
000014DC                           549      
000014DC                           550  RegularCondition
000014DC  B0B9 002E3D64            551      cmp.l   chosenBin,d0
000014E2  6600 0010                552      bne     WrongBin     
000014E6                           553      
000014E6                           554  CorrectBin
000014E6  06B9 0000000A 002E3D74   555      add.l   #10,pointsToAdd
000014F0  6000 001A                556      bra     FinishRegCondition
000014F4                           557      
000014F4                           558  WrongBin
000014F4  0CB9 00000000 002E3D6C   559      cmpi.l  #0,score
000014FE  6700 000C                560      beq     FinishRegCondition
00001502                           561      
00001502  04B9 0000000A 002E3D6C   562      sub.l   #10,score
0000150C                           563  FinishRegCondition
0000150C  4E75                     564      rts
0000150E                           565        
0000150E                           566  
0000150E                           567  
0000150E                           568  
0000150E                           569  
0000150E                           570  
0000150E                           571  
0000150E                           572  -------------------- end include --------------------
0000150E                           573      INCLUDE             "BMP_32Bit_Subroutine.X68"
0000150E  =00000050                574  PEN_COLOR_TRAP_CODE             EQU     80
0000150E  =00000052                575  DRAW_PIXEL_TRAP_CODE            EQU     82
0000150E  =00000021                576  SET_OUTPUT_RESOLUTION_TRAP_CODE EQU     33 
0000150E  =0000FF65                577  TRANSPARENT_COLOR               EQU     $0000FF65
0000150E                           578   
0000150E  =0000424D                579  FILE_SIGNATURE                  EQU     $424D
0000150E  =0000000D                580  PRINT_STRING_CR_LF              EQU     13
0000150E                           581  
0000150E  =0000000A                582  HEADER_STARTING_ADDRESS_OFFSET  EQU     10
0000150E  =00000012                583  HEADER_WIDTH_OFFSET             EQU     18
0000150E  =00000016                584  HEADER_HEIGHT_OFFSET            EQU     22
0000150E  =0000001C                585  HEADER_BITSPPIXEL               EQU     28
0000150E                           586  
0000150E                           587  
0000150E                           588  Check_File_Error
0000150E  700D                     589      move.l  #PRINT_STRING_CR_LF,d0           
00001510  43F9 002E3BBE            590      lea     ErrorMessage_WrongSignature, a1
00001516  4E4F                     591      TRAP    #15
00001518  FFFF FFFF                592      SIMHALT
0000151C                           593  
0000151C                           594  Check_File
0000151C  41F9 000016F8            595      lea     START_OF_DATA,a0
00001522  3018                     596      move.w  (a0)+,d0
00001524  B07C 424D                597      cmp.w   #FILE_SIGNATURE,d0   
00001528  66E4                     598      bne     Check_File_Error
0000152A  4E75                     599      rts
0000152C                           600  Initialize
0000152C  45F9 002E3C02            601      lea  SelectionWidth,a2
00001532  24AF 0008                602      move.l  8(sp),(a2)
00001536                           603      
00001536  45F9 002E3C06            604      lea  SelectionHeight,a2   
0000153C  24AF 000C                605      move.l  12(sp),(a2)
00001540                           606      
00001540  45F9 002E3BFE            607      lea  SelectionPosY,a2   
00001546  24AF 0010                608      move.l  16(sp),(a2)
0000154A                           609      
0000154A  45F9 002E3BFA            610      lea  SelectionPosX,a2
00001550  24AF 0014                611      move.l  20(sp),(a2)
00001554                           612      
00001554  45F9 002E3BE8            613      lea     BMPosY,a2
0000155A  24AF 0018                614      move.l  24(sp),(a2)  
0000155E                           615  
0000155E  45F9 002E3BE0            616      lea     BMPosYDraw,a2
00001564  24B9 002E3BE8            617      move.l  BMPosY,(a2)  
0000156A                           618    
0000156A  45F9 002E3BE4            619      lea     BMPosX,a2
00001570  24AF 001C                620      move.l  28(sp),(a2) 
00001574                           621    
00001574  45F9 002E3BDC            622      lea     BMPosXDraw,a2
0000157A  24B9 002E3BE4            623      move.l  BMPosX,(a2) 
00001580                           624      
00001580  4E75                     625      rts
00001582                           626      
00001582                           627  SetScreenResolution
00001582                           628      
00001582                           629      * Set Screen Resolution
00001582  103C 0021                630      move.b  #SET_OUTPUT_RESOLUTION_TRAP_CODE,d0
00001586  2239 002E3D60            631      move.l  ScreenHeight,d1
0000158C  4841                     632      swap    d1
0000158E  4E4F                     633      trap    #15
00001590  4E75                     634      rts
00001592                           635  
00001592                           636  Display
00001592  4EB8 151C                637      jsr     Check_File
00001596                           638      
00001596  4EB8 152C                639      jsr     Initialize
0000159A                           640      
0000159A  4EB9 000016A2            641      jsr     BM_Header           ; load header info into variables
000015A0                           642      
000015A0  4EB9 00001634            643      jsr     Set_Selection      ; set selection of pixels to print
000015A6                           644  
000015A6  7A00                     645      move.l  #0,d5              ; sets  d4 to true to indicate first iteration case
000015A8                           646      
000015A8  4EB9 00001600            647      jsr     Next_Row   
000015AE                           648      
000015AE  4E75                     649      rts     
000015B0                           650  
000015B0                           651  Endian_Conversion
000015B0  202F 0004                652      move.l  4(sp),d0        
000015B4  E158                     653      rol.w   #8,d0           
000015B6  4840                     654      swap    d0              
000015B8  E158                     655      rol.w   #8,d0           
000015BA                           656      
000015BA  4E75                     657      rts
000015BC                           658  Color_32bit
000015BC  103C 0050                659      move.b  #PEN_COLOR_TRAP_CODE,d0 ; sets pen color
000015C0                           660      
000015C0  2818                     661      move.l  (a0)+,d4
000015C2  E08C                     662      lsr.l   #8,d4      
000015C4  2204                     663      move.l  d4,d1
000015C6                           664     
000015C6  4E4F                     665      trap    #15
000015C8                           666      
000015C8  4E75                     667      rts
000015CA                           668  
000015CA                           669  Draw_Row
000015CA  7A01                     670      move.l  #1,d5                      ; sets d4 to false to show program has starting drawing rows
000015CC  4EB8 15BC                671      jsr     Color_32bit
000015D0  B8BC 0000FF65            672      cmp.l   #TRANSPARENT_COLOR,d4       ; checks for transparent color
000015D6  6700 0014                673      beq     Move_To_Next_Draw_Pos   
000015DA                           674      
000015DA  103C 0052                675      move.b  #DRAW_PIXEL_TRAP_CODE,d0    ; draws pixel with set color at specified position
000015DE  2239 002E3BDC            676      move.l  BMPosXDraw,d1                  ; draws pixel at specified position
000015E4  2439 002E3BE0            677      move.l  BMPosYDraw,d2
000015EA  4E4F                     678      trap    #15
000015EC                           679  
000015EC                           680  Move_To_Next_Draw_Pos   
000015EC  52B9 002E3BDC            681      addq.l  #1,BMPosXDraw               ; points to the next x position
000015F2  5283                     682      addq.l  #1,d3                       ; counter to ensure only the width amount of pixels are drawn per row
000015F4                           683      
000015F4  B6B9 002E3C02            684      cmp.l   SelectionWidth,d3          ; ensures only width amount of pixels are drawn per row
000015FA  6700 0004                685      beq     Next_Row
000015FE                           686      
000015FE  60CA                     687      bra     Draw_Row
00001600                           688    
00001600                           689  Next_Row
00001600  0C85 00000000            690      cmpi.l  #0,d5                   ; if true, skip first iteration of next_row 
00001606  67C2                     691      beq     Draw_Row
00001608                           692      
00001608  D1F9 002E3C0E            693      add.l   SelectionColorOffset,a0 ; skips rest of bytes for the row and moves pointer to next row in the pixel array
0000160E  23F9 002E3BE4 002E3BDC   694      move.l  BMPosX,BMPosXDraw              ; resets x position to its original
00001618                           695      
00001618  4283                     696      clr.l   d3                      ; resets the pixel per row counter
0000161A  53B9 002E3BE0            697      subq.l  #1,BMPosYDraw           ; moves pen to next y position
00001620  53B9 002E3C06            698      subq.l  #1,SelectionHeight
00001626                           699      
00001626  0CB9 00000001 002E3C06   700      cmpi.l  #1,SelectionHeight              ; ensures there are only n height rows drawn
00001630  6E98                     701      bgt     Draw_Row
00001632                           702      
00001632  4E75                     703      rts  
00001634                           704        
00001634                           705  Set_Selection
00001634                           706  
00001634  2439 002E3BEC            707      move.l  BMWidth,d2
0000163A  3639 002E3BF4            708      move.w  BMBitsPPixel,d3
00001640                           709      
00001640  2239 002E3BFA            710      move.l  SelectionPosX,d1           ; x pos
00001646  2039 002E3BFE            711      move.l  SelectionPosY,d0           ; y pos
0000164C                           712      
0000164C  86FC 0008                713      divu.w  #8,d3                   ; getting the bytes per pixel
00001650                           714   
00001650  C4C3                     715      mulu.w  d3,d2                   ; image width x pytes per pixel
00001652  C0C2                     716      mulu.w  d2,d0                   ; pos y * (image width x bytes per pixel)
00001654  C2C3                     717      mulu.w  d3,d1                   ; pos x * (bytes per pixel)
00001656                           718      
00001656  D280                     719      add.l   d0,d1                   ; (y product) + (x product)
00001658                           720      
00001658  45F9 002E3C0A            721      lea     SelectionStartOffset,a2
0000165E  2481                     722      move.l  d1,(a2)                      ; assigning value of offset to the offset variable
00001660  D1F9 002E3C0A            723      add.l   SelectionStartOffset,a0     ; setting new starting position within pixel array
00001666                           724     
00001666                           725      
00001666  2039 002E3BE0            726      move.l  BMPosYDraw,d0              ; setting pos y equal to the height of the image as well
0000166C  D0B9 002E3C06            727      add.l   SelectionHeight,d0
00001672  45F9 002E3BE0            728      lea     BMPosYDraw, a2
00001678  2480                     729      move.l  d0,(a2)
0000167A                           730      
0000167A  45F9 002E3BE8            731      lea     BMPosY,a2
00001680  24B9 002E3C06            732      move.l  SelectionHeight,(a2) 
00001686                           733      
00001686                           734     
00001686  2039 002E3C02            735      move.l  SelectionWidth,d0      ; getting the sub-image selection width
0000168C  2239 002E3BEC            736      move.l  BMWidth,d1             ; getting the original image width
00001692                           737      
00001692  9280                     738      sub.l   d0,d1                   ; OG width - subwidth = # of bytes to skip for the next row
00001694                           739      
00001694  C2C3                     740      mulu.w  d3,d1                   ; multiplying by # of bytes per pixel for 24 bit image
00001696                           741  
00001696                           742   
00001696  45F9 002E3C0E            743      lea     SelectionColorOffset,a2 ; assigning value to a variable 
0000169C  2481                     744      move.l  d1,(a2)
0000169E                           745   
0000169E  4283                     746      clr.l   d3                      ; clearing d3 register   
000016A0  4E75                     747      rts
000016A2                           748  
000016A2                           749  
000016A2                           750  BM_Header
000016A2  41F9 000016F8            751      lea     START_OF_DATA,a0
000016A8                           752      
000016A8                           753      * recording address of first element of pixel array
000016A8  2F28 000A                754      move.l  HEADER_STARTING_ADDRESS_OFFSET(a0),-(sp)        ; offset to find starting address
000016AC  4EB8 15B0                755      jsr     Endian_Conversion                   ; little to big endian conversion
000016B0  588F                     756      add.l   #4,sp                               ; fix stack
000016B2  45F9 002E3BD8            757      lea     BMStart,a2                          ; moves address BM_width is stored at into register a2
000016B8  2480                     758      move.l  d0,(a2)                             ; storing starting address offset value in BM_Start
000016BA                           759      
000016BA                           760      * recording width of BM
000016BA  2F28 0012                761      move.l  HEADER_WIDTH_OFFSET(a0),-(sp)       ; offset from starting address to find value of width
000016BE  4EB8 15B0                762      jsr     Endian_Conversion                   ; little to big endian conversion
000016C2  588F                     763      add.l   #4,sp                               ; fix stack
000016C4  45F9 002E3BEC            764      lea     BMWidth,a2                          ; moves address BM_width is stored at into register a2
000016CA  2480                     765      move.l  d0,(a2)                             ; storing width value in BM_width
000016CC                           766      
000016CC                           767      * recording height of BM
000016CC  2F28 0016                768      move.l  HEADER_HEIGHT_OFFSET(a0),-(sp)      ; offset from starting address to find value of width
000016D0  4EB8 15B0                769      jsr     Endian_Conversion  
000016D4  588F                     770      add.l   #4,sp               
000016D6  45F9 002E3BF0            771      lea     BMHeight,a2        
000016DC  2480                     772      move.l  d0,(a2)            
000016DE                           773      
000016DE                           774      * recording the BM's bits per pixel
000016DE  2F28 001C                775      move.l  HEADER_BITSPPIXEL(a0),-(sp)         ; offset to find the number of bits per pixel of BM
000016E2  4EB8 15B0                776      jsr     Endian_Conversion  
000016E6  588F                     777      add.l   #4,sp               
000016E8  45F9 002E3BF4            778      lea     BMBitsPPixel,a2    
000016EE  3480                     779      move.w  d0,(a2)            
000016F0                           780      
000016F0  D1F9 002E3BD8            781      add.l   BMStart,a0         ; setting pointer to start of pixel array
000016F6                           782      
000016F6  4E75                     783      rts
000016F8                           784  
000016F8                           785  
000016F8                           786  START_OF_DATA
000016F8                           787  DataFromBMP         INCBIN "TrashSortAssets.bmp"
002E3BBE                           788  END_OF_DATA
002E3BBE                           789  
002E3BBE                           790  
002E3BBE= 49 6E 63 6F 72 72 ...    791  ErrorMessage_WrongSignature dc.b 'Incorrect File Signature', 0
002E3BD7                           792  
002E3BD8                           793  BMStart            ds.l    1
002E3BDC                           794  BMPosXDraw         ds.l    1
002E3BE0                           795  BMPosYDraw         ds.l    1
002E3BE4                           796  BMPosX             ds.l    1   
002E3BE8                           797  BMPosY             ds.l    1
002E3BEC                           798  BMWidth            ds.l    1
002E3BF0                           799  BMHeight           ds.l    1
002E3BF4                           800  BMBitsPPixel       ds.w    1
002E3BF6                           801  PaddingBytes        ds.l    1
002E3BFA                           802  SelectionPosX          ds.l    1
002E3BFE                           803  SelectionPosY          ds.l    1
002E3C02                           804  Selectionwidth         ds.l    1
002E3C06                           805  SelectionHeight        ds.l    1
002E3C0A                           806  SelectionStartOffset   ds.l    1
002E3C0E                           807  SelectionColorOffset   ds.l    1
002E3C12                           808  
002E3C12                           809  
002E3C12                           810  
002E3C12                           811  
002E3C12                           812  
002E3C12                           813  
002E3C12                           814  
002E3C12                           815  
002E3C12                           816  
002E3C12                           817  
002E3C12                           818  -------------------- end include --------------------
002E3C12                           819      INCLUDE             "RandomObjectGenerator.X68"
002E3C12  =00000008                820  GET_TIME_COMMAND        EQU     8
002E3C12                           821  
002E3C12                           822  ;Seed the random number generator using the current time
002E3C12                           823  seedRandomNumber
002E3C12  48E7 FCFE                824          movem.l ALL_REG,-(sp)      ; Save registers
002E3C16  4286                     825          clr.l   d6
002E3C18  103C 0008                826          move.b  #GET_TIME_COMMAND,d0
002E3C1C  4E4F                     827          TRAP    #15
002E3C1E                           828  
002E3C1E  23C1 002E3C6C            829          move.l  d1,RANDOMVAL
002E3C24  4CDF 0007                830          movem.l (sp)+,d0-d2      ; Restore registers
002E3C28  4E75                     831          rts
002E3C2A                           832  
002E3C2A                           833  ;Generate a random byte and store it in d6
002E3C2A                           834  getRandomByteIntoD6
002E3C2A  48E7 E000                835          movem.l d0-d2,-(sp)      ; Save registers
002E3C2E  2039 002E3C6C            836          move.l  RANDOMVAL,d0
002E3C34  72AF                     837          moveq   #$AF-$100,d1
002E3C36  7412                     838          moveq   #18,d2
002E3C38                           839  Ninc0
002E3C38  D080                     840          add.l   d0,d0
002E3C3A  6400 0004                841          bcc     Ninc1
002E3C3E  B300                     842          eor.b   d1,d0
002E3C40                           843  Ninc1
002E3C40  51CA FFF6                844          dbf     d2,Ninc0
002E3C44                           845  
002E3C44  23C0 002E3C6C            846          move.l  d0,RANDOMVAL
002E3C4A                           847  
002E3C4A  2C00                     848          move.l  d0,d6            ; Store random value in d6
002E3C4C                           849  
002E3C4C  4CDF 0007                850          movem.l (sp)+,d0-d2      ; Restore registers
002E3C50  4E75                     851          rts
002E3C52                           852  
002E3C52                           853  ;Generate a random number between 0 and 2 and store it in d7
002E3C52                           854  RandomObjGenerator
002E3C52  4EB9 002E3C2A            855          jsr     getRandomByteIntoD6
002E3C58  2006                     856          move.l  d6,d0            ; Move the random value to d0
002E3C5A  0280 000000FF            857          andi.l  #$FF,d0          ; Ensure it is within byte range
002E3C60  80FC 0003                858          divu    #3,d0            ; Divide by 3 to get remainder (0, 1, or 2)
002E3C64  4840                     859          swap    d0
002E3C66  5280                     860          addq.l  #1,d0
002E3C68  1E00                     861          move.b  d0,d7            ; Move result to d7
002E3C6A                           862  
002E3C6A  4E75                     863          rts
002E3C6C                           864  
002E3C6C                           865  Variables
002E3C6C                           866  RANDOMVAL       ds.l    1
002E3C70                           867  
002E3C70                           868  
002E3C70                           869  
002E3C70                           870  -------------------- end include --------------------
002E3C70                           871      INCLUDE             "DisplayRandomObject.X68"
002E3C70                           872  DisplayRandomObj                
002E3C70                           873          * if random obj is recycle, find on bitmap to print
002E3C70  2039 002E3D70            874          move.l      randomObjToSort,d0
002E3C76  0C80 00000001            875          cmpi.l      #1,d0
002E3C7C  6700 002E                876          beq         DisplayRecycleObj
002E3C80                           877          
002E3C80  0C80 00000002            878          cmpi.l      #2,d0
002E3C86  6700 0080                879          beq         DisplayGoldObj
002E3C8A                           880          
002E3C8A  0C80 00000003            881          cmpi.l      #3,d0
002E3C90  6700 0048                882          beq         DisplayTrashObj
002E3C94                           883          
002E3C94                           884  DisplayRandomObjEnd       
002E3C94  2F01                     885          move.l      d1,-(sp) ; Screen pos x
002E3C96  2F02                     886          move.l      d2,-(sp) ; Screen pos y
002E3C98  2F03                     887          move.l      d3,-(sp) ; Selection Position X
002E3C9A  2F04                     888          move.l      d4,-(sp) ; Selection Position Y
002E3C9C  2F05                     889          move.l      d5,-(sp) ;HEIGHT
002E3C9E  2F06                     890          move.l      d6,-(sp) ;WIDTH
002E3CA0  4EB8 1592                891          jsr         display
002E3CA4  DFFC 00000018            892          add.l       #24,sp
002E3CAA  4E75                     893          rts 
002E3CAC                           894              
002E3CAC                           895  DisplayRecycleObj
002E3CAC  23FC 00000050 002E3D54   896          move.l      #80,randomObjHeight
002E3CB6  23FC 00000034 002E3D58   897          move.l      #52,randomObjWidth
002E3CC0                           898  
002E3CC0  2239 002E3D4C            899          move.l      randomObjPosX,d1 ; Selection Position X
002E3CC6  2439 002E3D50            900          move.l      randomObjPosY,d2 ; Selection Position Y
002E3CCC  263C 00000329            901          move.l      #809,d3 ; Selection Position X
002E3CD2  7800                     902          move.l      #0,d4 ; Selection Position Y
002E3CD4  7A50                     903          move.l      #80,d5 ;HEIGHT
002E3CD6  7C34                     904          move.l      #52,d6 ;WIDTH
002E3CD8                           905          
002E3CD8                           906          
002E3CD8  60BA                     907          bra         DisplayRandomObjEnd
002E3CDA                           908          
002E3CDA                           909  
002E3CDA                           910  DisplayTrashObj
002E3CDA  23FC 00000046 002E3D54   911          move.l      #70,randomObjHeight
002E3CE4  23FC 0000004E 002E3D58   912          move.l      #78,randomObjWidth
002E3CEE                           913        
002E3CEE  2239 002E3D4C            914          move.l      randomObjPosX,d1 ; Selection Position X
002E3CF4  2439 002E3D50            915          move.l      randomObjPosY,d2 ; Selection Position Y
002E3CFA  263C 000003D6            916          move.l      #982,d3 
002E3D00  7807                     917          move.l      #7,d4 
002E3D02  7A46                     918          move.l      #70,d5 
002E3D04  7C4E                     919          move.l      #78,d6 
002E3D06  608C                     920          bra         DisplayRandomObjEnd
002E3D08                           921  DisplayGoldObj
002E3D08  23FC 00000046 002E3D54   922          move.l      #70,randomObjHeight
002E3D12  23FC 0000004F 002E3D58   923          move.l      #79,randomObjWidth
002E3D1C                           924          
002E3D1C  2239 002E3D4C            925          move.l      randomObjPosX,d1 ; Selection Position X
002E3D22  2439 002E3D50            926          move.l      randomObjPosY,d2 ; Selection Position Y
002E3D28  263C 0000037E            927          move.l      #894,d3 
002E3D2E  7800                     928          move.l      #0,d4 
002E3D30  7A46                     929          move.l      #70,d5
002E3D32  7C4F                     930          move.l      #79,d6
002E3D34  6000 FF5E                931          bra         DisplayRandomObjEnd
002E3D38                           932  
002E3D38                           933  
002E3D38                           934  
002E3D38                           935  
002E3D38                           936  
002E3D38                           937  
002E3D38                           938  -------------------- end include --------------------
002E3D38                           939      
002E3D38= 00000001                 940  LastFrameKeyDown    dc.l    1
002E3D3C                           941  CurrentFrameKeyDown ds.l    1
002E3D40                           942  LastFrameTime       ds.l    1
002E3D44                           943  CurrentFrameTime    ds.l    1
002E3D48                           944  deltaTime           ds.l    1
002E3D4C                           945  
002E3D4C= 00000118                 946  randomObjPosX       dc.l    280
002E3D50= 00000000                 947  randomObjPosY       dc.l    0  
002E3D54                           948  randomObjHeight     ds.l    1
002E3D58                           949  randomObjWidth      ds.l    1 
002E3D5C                           950  
002E3D5C= 00000050                 951  velocity            dc.l    80
002E3D60                           952      
002E3D60= 01E0                     953  screenHeight        dc.w    480
002E3D62= 02A8                     954  screenWidth         dc.w    680
002E3D64= 00000000                 955  chosenBin           dc.l    0
002E3D68= 00000001                 956  sortedObj           dc.l    1
002E3D6C= 00000000                 957  score               dc.l    0
002E3D70= 00000001                 958  randomObjToSort     dc.l    1
002E3D74= 00000000                 959  pointsToAdd         dc.l    0
002E3D78                           960  
002E3D78  =0000000D                961  CR                  EQU     $0D
002E3D78  =0000000A                962  LF                  EQU     $0A
002E3D78                           963  
002E3D78= 24 00                    964  scoreString         dc.b    '$',0
002E3D7A                           965  
002E3D7A= 52 45 43 59 43 4C ...    966  recycleString       dc.b    'RECYCLE BIN',CR,LF,0
002E3D88                           967                      
002E3D88= 54 52 41 53 48 20 ...    968  trashString         dc.b    'TRASH BIN',CR,LF,0
002E3D94                           969                      
002E3D94= 4B 45 45 50 0D 0A 00     970  keepString          dc.b    'KEEP',CR,LF,0
002E3D9B                           971  
002E3D9B                           972  
002E3D9B                           973  
002E3D9B                           974      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7F3F
BACKGROUND_COLOR    9C6258
BMBITSPPIXEL        2E3BF4
BMHEIGHT            2E3BF0
BMPOSX              2E3BE4
BMPOSXDRAW          2E3BDC
BMPOSY              2E3BE8
BMPOSYDRAW          2E3BE0
BMSTART             2E3BD8
BMWIDTH             2E3BEC
BM_HEADER           16A2
CALCDELTATIME       123E
CALCSCORE           12B2
CALCVELOCITY        1252
CALLFUNCTION        12EC
CENTER              1326
CHECKINPUT          12D6
CHECKOBJSORTED      1486
CHECK_FILE          151C
CHECK_FILE_ERROR    150E
CHOSENBIN           2E3D64
CLEAR_SCREEN        B
CLEAR_SCREEN_COMMAND  B
CLEAR_SCREEN_MAGIC_VAL  FF00
COLOR_32BIT         15BC
CORRECTBIN          14E6
CORRECTGOLDBIN      14B6
CR                  D
CURRENTFRAMEKEYDOWN  2E3D3C
CURRENTFRAMETIME    2E3D44
DATAFROMBMP         16F8
DELTATIME           2E3D48
DISPLAY             1592
DISPLAYBACKGROUND   11F8
DISPLAYBINLABELS    1138
DISPLAYENTERSCREEN  11D0
DISPLAYGOLDOBJ      2E3D08
DISPLAYLOADINGSCREEN  11A8
DISPLAYRANDOMNUM    1292
DISPLAYRANDOMOBJ    2E3C70
DISPLAYRANDOMOBJEND  2E3C94
DISPLAYRECYCLEOBJ   2E3CAC
DISPLAYSCORE        12A2
DISPLAYTRASHOBJ     2E3CDA
DISPLAY_SCORE       F
DISPLAY_STRING      5F
DOUBLE_BUFFERED_MODE  11
DRAWING_MODE_COMMAND  5C
DRAW_PIXEL_TRAP_CODE  52
DRAW_RECTANGLE      57
DRAW_ROW            15CA
ENDGAMELOOP         10FC
ENDIAN_CONVERSION   15B0
END_OF_DATA         2E3BBE
ENTER_GAMELOOP_INPUT  5
ERRORMESSAGE_WRONGSIGNATURE  2E3BBE
FILE_SIGNATURE      424D
FILLBACKGROUND      1266
FILL_COLOR          51
FILL_COLOR_COMMAND  51
FINDTIMEBASEDMOVEMENT  1214
FINISHREGCONDITION  150C
FLOOD_FILL_COMMAND  59
FUNCTIONTABLE       1436
GAMELOOP            1060
GAMELOOPINITIALIZE  105A
GETRANDOMBYTEINTOD6  2E3C2A
GETTIME             1232
GET_KEY_INPUT_COMMAND  13
GET_SCREEN_SIZE     21
GET_TIME_COMMAND    8
GOLDCONDITION       14A6
GOLD_OBJ            2
HAVE_HAD_NO_INPUT   1430
HEADER_BITSPPIXEL   1C
HEADER_HEIGHT_OFFSET  16
HEADER_STARTING_ADDRESS_OFFSET  A
HEADER_WIDTH_OFFSET  12
INITDATA            12D0
INITIALIZE          152C
KEEPBINMOVE         140C
KEEPSTRING          2E3D94
KEEP_BIN            2
KEY_DOWN_INPUT      53
KEY_LEFT_INPUT      41
KEY_RIGHT_INPUT     44
LASTFRAMEKEYDOWN    2E3D38
LASTFRAMETIME       2E3D40
LF                  A
MAININITIALIZE      1000
MOVE_OBJECT_POSITION  56
MOVE_TO_NEXT_DRAW_POS  15EC
NEXT_ROW            1600
NINC0               2E3C38
NINC1               2E3C40
NOFUNCPTR           1318
NOINPUT             131A
OBJDROPEND          107C
OBJECTPOSX          1432
OBJECTPOSY          1434
OBJINPUTMOVE        10BC
OBJINPUTMOVEEND     10CC
OBJINVAL            1170
OBJMOVEMENT         139E
PADDINGBYTES        2E3BF6
PEN_COLOR           50
PEN_COLOR_COMMAND   50
PEN_COLOR_TRAP_CODE  50
POINTSTOADD         2E3D74
PRINT_STRING        5F
PRINT_STRING_CR_LF  D
RANDOMOBJDROP       127E
RANDOMOBJGENERATOR  2E3C52
RANDOMOBJHEIGHT     2E3D54
RANDOMOBJPOSX       2E3D4C
RANDOMOBJPOSY       2E3D50
RANDOMOBJTOSORT     2E3D70
RANDOMOBJWIDTH      2E3D58
RANDOMVAL           2E3C6C
RECYCLEBINMOVE      13C4
RECYCLESTRING       2E3D7A
RECYCLE_BIN         1
REGULARCONDITION    14DC
REPAINT_SCREEN_COMMAND  5E
RESTARTSCREEN       1354
SCORE               2E3D6C
SCORESTRING         2E3D78
SCREENHEIGHT        2E3D60
SCREENWIDTH         2E3D62
SEEDRANDOMNUMBER    2E3C12
SELECTIONCOLOROFFSET  2E3C0E
SELECTIONHEIGHT     2E3C06
SELECTIONPOSX       2E3BFA
SELECTIONPOSY       2E3BFE
SELECTIONSTARTOFFSET  2E3C0A
SELECTIONWIDTH      2E3C02
SETSCREENRESOLUTION  1582
SET_OUTPUT_RESOLUTION_TRAP_CODE  21
SET_SELECTION       1634
SORTDOWNKEEP        138A
SORTEDOBJ           2E3D68
SORTLEFTRECYCLE     1362
SORTRIGHTTRASH      1376
START               1000
START_OF_DATA       16F8
SWAPBUFFERS         12C4
TRANSPARENT_COLOR   FF65
TRASHBINMOVE        13E8
TRASHSTRING         2E3D88
TRASH_BIN           3
UPDATE              1112
VARIABLES           2E3C6C
VELOCITY            2E3D5C
WAITFORENTER        103A
WRONGBIN            14F4
WRONGGOLDBIN        14C2
