ALL_REG                 REG     D0-D5/A0-A6
KEY_LEFT_INPUT          EQU     $41  ; 'A' key
KEY_RIGHT_INPUT         EQU     $44  ; 'D' key
KEY_DOWN_INPUT          EQU     $53  ; 'S' key
GET_KEY_INPUT_COMMAND   EQU     19
CLEAR_SCREEN            EQU     11
CLEAR_SCREEN_MAGIC_VAL  EQU     $FF00
DRAW_RECTANGLE          EQU     87
GET_SCREEN_SIZE         EQU     33
FILL_COLOR              EQU     81
PEN_COLOR               EQU     80
MOVE_OBJECT_POSITION    EQU     86

RECYCLE_BIN             EQU     1    
TRASH_BIN               EQU     2  
KEEP_BIN                EQU     3  

* Initialize Data
InitData
        move.l  #KEY_LEFT_INPUT,d2
        rts

* Check for Input
CheckInput   
        move.b  #GET_KEY_INPUT_COMMAND,d0
        move.l  d2,d1
        TRAP    #15
        
        cmpi.b  #0,d1
        beq     noInput

        move.b  HAVE_HAD_NO_INPUT,d0
        beq     aroundNoInput
        move.b  #0,HAVE_HAD_NO_INPUT

        jsr     CallFunction

noInput
        move.b  #1,HAVE_HAD_NO_INPUT
        add.l   #1,d2
        cmpi.b  #KEY_DOWN_INPUT+1,d2
        bne     CheckInput
        jmp     InitData
        
aroundNoInput
        bra     CheckInput

* Call Function
CallFunction
        movem.l ALL_REG,-(sp)
        lea     FunctionTable,a0
        sub.l   #KEY_LEFT_INPUT,d2
        lsl.l   #2,d2
        move.l  (a0,d2),d1
        cmpi.l  #0,d1
        beq     noFuncPtr
        move.l  d1,a1
        jsr     (a1)  
 
noFuncPtr
        move.b  #1,HAVE_HAD_NO_INPUT
        movem.l (sp)+,ALL_REG
        add.l   #4,sp
        rts

* Center Screen Position
Center
        move.l   #GET_SCREEN_SIZE,d0
        move.w   #0,d1
        trap     #15
       
        move.w   d1,screenHeight
        move.w   d1,d5
        lea      objectPosY,a2
        lsr.w    #1,d5
        move.w   d5,(a2)
       
        swap     d1
        move.w   d1,screenWidth
        lea      objectPosX,a2
        lsr.w    #1,d1
        move.w   d1,(a2)
       
        rts

* Draw Square at Center
DrawSquare
        move.l   #DRAW_RECTANGLE,d0
        move.w   objectPosX,d5
        subq.w   #5,d5
        move.w   d5,d1
        add.w    #10,d5
        move.w   d5,d3
        move.w   objectPosY,d5
        addq.w   #5,d5
        move.w   d5,d2
        sub.w    #10,d5
        move.w   d5,d4
        trap     #15
        rts 
        
* Restart Screen
RestartScreen
        move.l   #CLEAR_SCREEN,d0
        move.w   #CLEAR_SCREEN_MAGIC_VAL,d1
        trap     #15
        jsr      Center
        rts

* Sorting Functions
SortLeftRecycle
        movem.l ALL_REG,-(sp)
        move.w  #0,objectPosX   
        jsr     DrawSquare
        lea     score,a2
        add.l   #10,(a2)
        move.l  #RECYCLE_BIN,d7  
        movem.l (sp)+,ALL_REG
        rts

SortRightTrash
        movem.l ALL_REG,-(sp) 
        move.w  screenWidth,objectPosX 
        jsr     DrawSquare
        lea     score,a2
        add.l   #20,(a2)
        move.l  #TRASH_BIN,d7
        movem.l (sp)+,ALL_REG
        rts

SortDownKeep
        movem.l ALL_REG,-(sp)   
        move.w  screenHeight,objectPosY
        jsr     DrawSquare
        lea     score,a2
        add.l   #20,(a2)
        move.l  #KEEP_BIN,d7
        movem.l (sp)+,ALL_REG
        rts

* Data Definitions
HAVE_HAD_NO_INPUT  ds.b    1

objectPosX         ds.w    1
objectPosY         ds.w    1
FunctionTable      dc.l    SortLeftRecycle,0,0,SortRightTrash,0,0,0
FunctionTable      dc.l    0,0,0,0,0,0,0,0,SortDownKeep,0
